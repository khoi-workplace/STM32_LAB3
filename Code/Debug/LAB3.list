
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800305c  0800305c  00020160  2**0
                  CONTENTS
  4 .ARM          00000000  0800305c  0800305c  00020160  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800305c  0800305c  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08003064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000160  080031c4  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080031c4  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ccf  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcf  00000000  00000000  00029e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002ba28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002c490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016afb  00000000  00000000  0002ce10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b577  00000000  00000000  0004390b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082970  00000000  00000000  0004ee82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d17f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c8  00000000  00000000  000d1848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000160 	.word	0x20000160
 8000128:	00000000 	.word	0x00000000
 800012c:	08003020 	.word	0x08003020

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000164 	.word	0x20000164
 8000148:	08003020 	.word	0x08003020

0800014c <updateLedBuffer_0>:

int red_counter_buffer_temp = DEFAULT_RED_COUNTER;
int amber_counter_buffer_temp = DEFAULT_AMBER_COUNTER;
int green_counter_buffer_temp = DEFAULT_GREEN_COUNTER;

void updateLedBuffer_0(int num) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	led_buffer_0[0] = num / 10;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a0d      	ldr	r2, [pc, #52]	; (800018c <updateLedBuffer_0+0x40>)
 8000158:	fb82 1203 	smull	r1, r2, r2, r3
 800015c:	1092      	asrs	r2, r2, #2
 800015e:	17db      	asrs	r3, r3, #31
 8000160:	1ad3      	subs	r3, r2, r3
 8000162:	4a0b      	ldr	r2, [pc, #44]	; (8000190 <updateLedBuffer_0+0x44>)
 8000164:	6013      	str	r3, [r2, #0]
	led_buffer_0[1] = num % 10;
 8000166:	6879      	ldr	r1, [r7, #4]
 8000168:	4b08      	ldr	r3, [pc, #32]	; (800018c <updateLedBuffer_0+0x40>)
 800016a:	fb83 2301 	smull	r2, r3, r3, r1
 800016e:	109a      	asrs	r2, r3, #2
 8000170:	17cb      	asrs	r3, r1, #31
 8000172:	1ad2      	subs	r2, r2, r3
 8000174:	4613      	mov	r3, r2
 8000176:	009b      	lsls	r3, r3, #2
 8000178:	4413      	add	r3, r2
 800017a:	005b      	lsls	r3, r3, #1
 800017c:	1aca      	subs	r2, r1, r3
 800017e:	4b04      	ldr	r3, [pc, #16]	; (8000190 <updateLedBuffer_0+0x44>)
 8000180:	605a      	str	r2, [r3, #4]
}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	66666667 	.word	0x66666667
 8000190:	2000018c 	.word	0x2000018c

08000194 <updateLedBuffer_1>:

void updateLedBuffer_1(int num) {
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	led_buffer_1[0] = num / 10;
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4a0d      	ldr	r2, [pc, #52]	; (80001d4 <updateLedBuffer_1+0x40>)
 80001a0:	fb82 1203 	smull	r1, r2, r2, r3
 80001a4:	1092      	asrs	r2, r2, #2
 80001a6:	17db      	asrs	r3, r3, #31
 80001a8:	1ad3      	subs	r3, r2, r3
 80001aa:	4a0b      	ldr	r2, [pc, #44]	; (80001d8 <updateLedBuffer_1+0x44>)
 80001ac:	6013      	str	r3, [r2, #0]
	led_buffer_1[1] = num % 10;
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <updateLedBuffer_1+0x40>)
 80001b2:	fb83 2301 	smull	r2, r3, r3, r1
 80001b6:	109a      	asrs	r2, r3, #2
 80001b8:	17cb      	asrs	r3, r1, #31
 80001ba:	1ad2      	subs	r2, r2, r3
 80001bc:	4613      	mov	r3, r2
 80001be:	009b      	lsls	r3, r3, #2
 80001c0:	4413      	add	r3, r2
 80001c2:	005b      	lsls	r3, r3, #1
 80001c4:	1aca      	subs	r2, r1, r3
 80001c6:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <updateLedBuffer_1+0x44>)
 80001c8:	605a      	str	r2, [r3, #4]
}
 80001ca:	bf00      	nop
 80001cc:	370c      	adds	r7, #12
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	66666667 	.word	0x66666667
 80001d8:	20000194 	.word	0x20000194

080001dc <get_red_counter_buffer>:

int get_red_counter_buffer(void) {
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	return red_counter_buffer;
 80001e0:	4b02      	ldr	r3, [pc, #8]	; (80001ec <get_red_counter_buffer+0x10>)
 80001e2:	681b      	ldr	r3, [r3, #0]
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	20000004 	.word	0x20000004

080001f0 <get_amber_counter_buffer>:

int get_amber_counter_buffer(void) {
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
	return amber_counter_buffer;
 80001f4:	4b02      	ldr	r3, [pc, #8]	; (8000200 <get_amber_counter_buffer+0x10>)
 80001f6:	681b      	ldr	r3, [r3, #0]
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr
 8000200:	20000008 	.word	0x20000008

08000204 <get_green_counter_buffer>:

int get_green_counter_buffer(void) {
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	return green_counter_buffer;
 8000208:	4b02      	ldr	r3, [pc, #8]	; (8000214 <get_green_counter_buffer+0x10>)
 800020a:	681b      	ldr	r3, [r3, #0]
}
 800020c:	4618      	mov	r0, r3
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	2000000c 	.word	0x2000000c

08000218 <balanceCounterInMode>:

void balanceCounterInMode(int mode) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	// Priority: RED -> GREEN -> AMBER & Ensure not change the lastest modified_color counter
	switch (mode) {
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b04      	cmp	r3, #4
 8000224:	d019      	beq.n	800025a <balanceCounterInMode+0x42>
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2b04      	cmp	r3, #4
 800022a:	dc4e      	bgt.n	80002ca <balanceCounterInMode+0xb2>
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b02      	cmp	r3, #2
 8000230:	d003      	beq.n	800023a <balanceCounterInMode+0x22>
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2b03      	cmp	r3, #3
 8000236:	d008      	beq.n	800024a <balanceCounterInMode+0x32>
			} else {
				amber_counter_buffer = red_counter_buffer - green_counter_buffer;
			}
			break;
		default:
			return;
 8000238:	e047      	b.n	80002ca <balanceCounterInMode+0xb2>
			green_counter_buffer = red_counter_buffer - amber_counter_buffer;
 800023a:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <balanceCounterInMode+0xbc>)
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <balanceCounterInMode+0xc0>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	1ad3      	subs	r3, r2, r3
 8000244:	4a25      	ldr	r2, [pc, #148]	; (80002dc <balanceCounterInMode+0xc4>)
 8000246:	6013      	str	r3, [r2, #0]
			break;
 8000248:	e01d      	b.n	8000286 <balanceCounterInMode+0x6e>
			green_counter_buffer = red_counter_buffer - amber_counter_buffer;
 800024a:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <balanceCounterInMode+0xbc>)
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	4b22      	ldr	r3, [pc, #136]	; (80002d8 <balanceCounterInMode+0xc0>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	1ad3      	subs	r3, r2, r3
 8000254:	4a21      	ldr	r2, [pc, #132]	; (80002dc <balanceCounterInMode+0xc4>)
 8000256:	6013      	str	r3, [r2, #0]
			break;
 8000258:	e015      	b.n	8000286 <balanceCounterInMode+0x6e>
			if (green_counter_buffer >= red_counter_buffer) {
 800025a:	4b20      	ldr	r3, [pc, #128]	; (80002dc <balanceCounterInMode+0xc4>)
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <balanceCounterInMode+0xbc>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	429a      	cmp	r2, r3
 8000264:	db07      	blt.n	8000276 <balanceCounterInMode+0x5e>
				red_counter_buffer = green_counter_buffer + amber_counter_buffer;
 8000266:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <balanceCounterInMode+0xc4>)
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <balanceCounterInMode+0xc0>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4413      	add	r3, r2
 8000270:	4a18      	ldr	r2, [pc, #96]	; (80002d4 <balanceCounterInMode+0xbc>)
 8000272:	6013      	str	r3, [r2, #0]
			break;
 8000274:	e006      	b.n	8000284 <balanceCounterInMode+0x6c>
				amber_counter_buffer = red_counter_buffer - green_counter_buffer;
 8000276:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <balanceCounterInMode+0xbc>)
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	4b18      	ldr	r3, [pc, #96]	; (80002dc <balanceCounterInMode+0xc4>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	1ad3      	subs	r3, r2, r3
 8000280:	4a15      	ldr	r2, [pc, #84]	; (80002d8 <balanceCounterInMode+0xc0>)
 8000282:	6013      	str	r3, [r2, #0]
			break;
 8000284:	bf00      	nop
			break;
	}

	if (red_counter_buffer < 0 || amber_counter_buffer < 0 || green_counter_buffer < 0) {
 8000286:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <balanceCounterInMode+0xbc>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	db07      	blt.n	800029e <balanceCounterInMode+0x86>
 800028e:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <balanceCounterInMode+0xc0>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	db03      	blt.n	800029e <balanceCounterInMode+0x86>
 8000296:	4b11      	ldr	r3, [pc, #68]	; (80002dc <balanceCounterInMode+0xc4>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	da08      	bge.n	80002b0 <balanceCounterInMode+0x98>
		red_counter_buffer = DEFAULT_RED_COUNTER;
 800029e:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <balanceCounterInMode+0xbc>)
 80002a0:	2205      	movs	r2, #5
 80002a2:	601a      	str	r2, [r3, #0]
		amber_counter_buffer = DEFAULT_AMBER_COUNTER;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <balanceCounterInMode+0xc0>)
 80002a6:	2202      	movs	r2, #2
 80002a8:	601a      	str	r2, [r3, #0]
		green_counter_buffer = DEFAULT_GREEN_COUNTER;
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <balanceCounterInMode+0xc4>)
 80002ac:	2203      	movs	r2, #3
 80002ae:	601a      	str	r2, [r3, #0]
	}

	// Update temp buffer
	red_counter_buffer_temp = red_counter_buffer;
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <balanceCounterInMode+0xbc>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <balanceCounterInMode+0xc8>)
 80002b6:	6013      	str	r3, [r2, #0]
	amber_counter_buffer_temp = amber_counter_buffer;
 80002b8:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <balanceCounterInMode+0xc0>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a09      	ldr	r2, [pc, #36]	; (80002e4 <balanceCounterInMode+0xcc>)
 80002be:	6013      	str	r3, [r2, #0]
	green_counter_buffer_temp = green_counter_buffer;
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <balanceCounterInMode+0xc4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <balanceCounterInMode+0xd0>)
 80002c6:	6013      	str	r3, [r2, #0]
 80002c8:	e000      	b.n	80002cc <balanceCounterInMode+0xb4>
			return;
 80002ca:	bf00      	nop
}
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	20000004 	.word	0x20000004
 80002d8:	20000008 	.word	0x20000008
 80002dc:	2000000c 	.word	0x2000000c
 80002e0:	20000010 	.word	0x20000010
 80002e4:	20000014 	.word	0x20000014
 80002e8:	20000018 	.word	0x20000018

080002ec <fsm_for_input_processing>:

void fsm_for_input_processing(void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
	// Input_processing for button 1
	switch (button1State) {
 80002f2:	4bab      	ldr	r3, [pc, #684]	; (80005a0 <fsm_for_input_processing+0x2b4>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	f000 80b7 	beq.w	800046a <fsm_for_input_processing+0x17e>
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	f300 80be 	bgt.w	800047e <fsm_for_input_processing+0x192>
 8000302:	2b00      	cmp	r3, #0
 8000304:	d002      	beq.n	800030c <fsm_for_input_processing+0x20>
 8000306:	2b01      	cmp	r3, #1
 8000308:	d00e      	beq.n	8000328 <fsm_for_input_processing+0x3c>
		case BUTTON_PRESSED_MORE_THAN_1S:
			if (!is_button_pressed(BUTTON_FOR_MODE)) {
				button1State = BUTTON_RELEASED;
			}
			break;
		default: break;
 800030a:	e0b8      	b.n	800047e <fsm_for_input_processing+0x192>
			if (is_button_pressed(BUTTON_FOR_MODE)) {
 800030c:	2000      	movs	r0, #0
 800030e:	f000 fba3 	bl	8000a58 <is_button_pressed>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d003      	beq.n	8000320 <fsm_for_input_processing+0x34>
				button1State = BUTTON_PRESSED;
 8000318:	4ba1      	ldr	r3, [pc, #644]	; (80005a0 <fsm_for_input_processing+0x2b4>)
 800031a:	2201      	movs	r2, #1
 800031c:	701a      	strb	r2, [r3, #0]
			break;
 800031e:	e0b3      	b.n	8000488 <fsm_for_input_processing+0x19c>
			else button1_toggle_flag = 0;
 8000320:	4ba0      	ldr	r3, [pc, #640]	; (80005a4 <fsm_for_input_processing+0x2b8>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
			break;
 8000326:	e0af      	b.n	8000488 <fsm_for_input_processing+0x19c>
			if (checkTimerFlag(tmr_btn_press) && !button1_toggle_flag) {
 8000328:	2001      	movs	r0, #1
 800032a:	f001 fac5 	bl	80018b8 <checkTimerFlag>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	f000 8086 	beq.w	8000442 <fsm_for_input_processing+0x156>
 8000336:	4b9b      	ldr	r3, [pc, #620]	; (80005a4 <fsm_for_input_processing+0x2b8>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8081 	bne.w	8000442 <fsm_for_input_processing+0x156>
				resetTimer(tmr_btn_press);
 8000340:	2001      	movs	r0, #1
 8000342:	f001 fa8f 	bl	8001864 <resetTimer>
				button1_toggle_flag = 1;
 8000346:	4b97      	ldr	r3, [pc, #604]	; (80005a4 <fsm_for_input_processing+0x2b8>)
 8000348:	2201      	movs	r2, #1
 800034a:	601a      	str	r2, [r3, #0]
				if (mode == 0) { // Prepare resources before switching to manual mode
 800034c:	4b96      	ldr	r3, [pc, #600]	; (80005a8 <fsm_for_input_processing+0x2bc>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d103      	bne.n	800035c <fsm_for_input_processing+0x70>
					free_dir = 0;
 8000354:	4b95      	ldr	r3, [pc, #596]	; (80005ac <fsm_for_input_processing+0x2c0>)
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	e064      	b.n	8000426 <fsm_for_input_processing+0x13a>
				else if (mode > 0 && mode < N0_OF_MODES - 1) { // Prepare resources before switching to modify modes
 800035c:	4b92      	ldr	r3, [pc, #584]	; (80005a8 <fsm_for_input_processing+0x2bc>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	dd38      	ble.n	80003d6 <fsm_for_input_processing+0xea>
 8000364:	4b92      	ldr	r3, [pc, #584]	; (80005b0 <fsm_for_input_processing+0x2c4>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	1e5a      	subs	r2, r3, #1
 800036a:	4b8f      	ldr	r3, [pc, #572]	; (80005a8 <fsm_for_input_processing+0x2bc>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	429a      	cmp	r2, r3
 8000370:	dd31      	ble.n	80003d6 <fsm_for_input_processing+0xea>
					updateLedBuffer_0(mode + 1);
 8000372:	4b8d      	ldr	r3, [pc, #564]	; (80005a8 <fsm_for_input_processing+0x2bc>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	3301      	adds	r3, #1
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff fee7 	bl	800014c <updateLedBuffer_0>
					switch (mode + 1) {
 800037e:	4b8a      	ldr	r3, [pc, #552]	; (80005a8 <fsm_for_input_processing+0x2bc>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	3301      	adds	r3, #1
 8000384:	2b04      	cmp	r3, #4
 8000386:	d01a      	beq.n	80003be <fsm_for_input_processing+0xd2>
 8000388:	2b04      	cmp	r3, #4
 800038a:	dc22      	bgt.n	80003d2 <fsm_for_input_processing+0xe6>
 800038c:	2b02      	cmp	r3, #2
 800038e:	d002      	beq.n	8000396 <fsm_for_input_processing+0xaa>
 8000390:	2b03      	cmp	r3, #3
 8000392:	d00a      	beq.n	80003aa <fsm_for_input_processing+0xbe>
						default: break;
 8000394:	e01d      	b.n	80003d2 <fsm_for_input_processing+0xe6>
							updateLedBuffer_1(red_counter_buffer_temp = red_counter_buffer); break;
 8000396:	4b87      	ldr	r3, [pc, #540]	; (80005b4 <fsm_for_input_processing+0x2c8>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a87      	ldr	r2, [pc, #540]	; (80005b8 <fsm_for_input_processing+0x2cc>)
 800039c:	6013      	str	r3, [r2, #0]
 800039e:	4b86      	ldr	r3, [pc, #536]	; (80005b8 <fsm_for_input_processing+0x2cc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff fef6 	bl	8000194 <updateLedBuffer_1>
 80003a8:	e014      	b.n	80003d4 <fsm_for_input_processing+0xe8>
							updateLedBuffer_1(amber_counter_buffer_temp = amber_counter_buffer); break;
 80003aa:	4b84      	ldr	r3, [pc, #528]	; (80005bc <fsm_for_input_processing+0x2d0>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a84      	ldr	r2, [pc, #528]	; (80005c0 <fsm_for_input_processing+0x2d4>)
 80003b0:	6013      	str	r3, [r2, #0]
 80003b2:	4b83      	ldr	r3, [pc, #524]	; (80005c0 <fsm_for_input_processing+0x2d4>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff feec 	bl	8000194 <updateLedBuffer_1>
 80003bc:	e00a      	b.n	80003d4 <fsm_for_input_processing+0xe8>
							updateLedBuffer_1(green_counter_buffer_temp = green_counter_buffer); break;
 80003be:	4b81      	ldr	r3, [pc, #516]	; (80005c4 <fsm_for_input_processing+0x2d8>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a81      	ldr	r2, [pc, #516]	; (80005c8 <fsm_for_input_processing+0x2dc>)
 80003c4:	6013      	str	r3, [r2, #0]
 80003c6:	4b80      	ldr	r3, [pc, #512]	; (80005c8 <fsm_for_input_processing+0x2dc>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff fee2 	bl	8000194 <updateLedBuffer_1>
 80003d0:	e000      	b.n	80003d4 <fsm_for_input_processing+0xe8>
						default: break;
 80003d2:	bf00      	nop
					switch (mode + 1) {
 80003d4:	e027      	b.n	8000426 <fsm_for_input_processing+0x13a>
				else if (mode == N0_OF_MODES - 1) { // Prepare resources before switching to automatic mode
 80003d6:	4b76      	ldr	r3, [pc, #472]	; (80005b0 <fsm_for_input_processing+0x2c4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	1e5a      	subs	r2, r3, #1
 80003dc:	4b72      	ldr	r3, [pc, #456]	; (80005a8 <fsm_for_input_processing+0x2bc>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d120      	bne.n	8000426 <fsm_for_input_processing+0x13a>
					resetTimer(tmr_traffic_clk);
 80003e4:	2000      	movs	r0, #0
 80003e6:	f001 fa3d 	bl	8001864 <resetTimer>
					led0_status = GREEN; 	// Set initial status of led0
 80003ea:	4b78      	ldr	r3, [pc, #480]	; (80005cc <fsm_for_input_processing+0x2e0>)
 80003ec:	2202      	movs	r2, #2
 80003ee:	701a      	strb	r2, [r3, #0]
					led1_status = RED;		// Set initial status of led1
 80003f0:	4b77      	ldr	r3, [pc, #476]	; (80005d0 <fsm_for_input_processing+0x2e4>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
					red_counter_0 = red_counter_buffer;
 80003f6:	4b6f      	ldr	r3, [pc, #444]	; (80005b4 <fsm_for_input_processing+0x2c8>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a76      	ldr	r2, [pc, #472]	; (80005d4 <fsm_for_input_processing+0x2e8>)
 80003fc:	6013      	str	r3, [r2, #0]
					red_counter_1 = red_counter_buffer;
 80003fe:	4b6d      	ldr	r3, [pc, #436]	; (80005b4 <fsm_for_input_processing+0x2c8>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a75      	ldr	r2, [pc, #468]	; (80005d8 <fsm_for_input_processing+0x2ec>)
 8000404:	6013      	str	r3, [r2, #0]
					amber_counter_0 = amber_counter_buffer;
 8000406:	4b6d      	ldr	r3, [pc, #436]	; (80005bc <fsm_for_input_processing+0x2d0>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a74      	ldr	r2, [pc, #464]	; (80005dc <fsm_for_input_processing+0x2f0>)
 800040c:	6013      	str	r3, [r2, #0]
					amber_counter_1 = amber_counter_buffer;
 800040e:	4b6b      	ldr	r3, [pc, #428]	; (80005bc <fsm_for_input_processing+0x2d0>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a73      	ldr	r2, [pc, #460]	; (80005e0 <fsm_for_input_processing+0x2f4>)
 8000414:	6013      	str	r3, [r2, #0]
					green_counter_0 = green_counter_buffer;
 8000416:	4b6b      	ldr	r3, [pc, #428]	; (80005c4 <fsm_for_input_processing+0x2d8>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a72      	ldr	r2, [pc, #456]	; (80005e4 <fsm_for_input_processing+0x2f8>)
 800041c:	6013      	str	r3, [r2, #0]
					green_counter_1 = green_counter_buffer;
 800041e:	4b69      	ldr	r3, [pc, #420]	; (80005c4 <fsm_for_input_processing+0x2d8>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a71      	ldr	r2, [pc, #452]	; (80005e8 <fsm_for_input_processing+0x2fc>)
 8000424:	6013      	str	r3, [r2, #0]
				mode = (mode + 1) % N0_OF_MODES;
 8000426:	4b60      	ldr	r3, [pc, #384]	; (80005a8 <fsm_for_input_processing+0x2bc>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	3301      	adds	r3, #1
 800042c:	4a60      	ldr	r2, [pc, #384]	; (80005b0 <fsm_for_input_processing+0x2c4>)
 800042e:	6812      	ldr	r2, [r2, #0]
 8000430:	fb93 f1f2 	sdiv	r1, r3, r2
 8000434:	fb02 f201 	mul.w	r2, r2, r1
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	4a5b      	ldr	r2, [pc, #364]	; (80005a8 <fsm_for_input_processing+0x2bc>)
 800043c:	6013      	str	r3, [r2, #0]
				clearAllLeds();
 800043e:	f000 fc95 	bl	8000d6c <clearAllLeds>
			if (!is_button_pressed_1s(BUTTON_FOR_MODE)) {
 8000442:	2000      	movs	r0, #0
 8000444:	f000 fb22 	bl	8000a8c <is_button_pressed_1s>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d103      	bne.n	8000456 <fsm_for_input_processing+0x16a>
				button1State = BUTTON_RELEASED;
 800044e:	4b54      	ldr	r3, [pc, #336]	; (80005a0 <fsm_for_input_processing+0x2b4>)
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
			break;
 8000454:	e015      	b.n	8000482 <fsm_for_input_processing+0x196>
				if (is_button_pressed_1s(BUTTON_FOR_MODE)) {
 8000456:	2000      	movs	r0, #0
 8000458:	f000 fb18 	bl	8000a8c <is_button_pressed_1s>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d00f      	beq.n	8000482 <fsm_for_input_processing+0x196>
					button1State = BUTTON_PRESSED_MORE_THAN_1S;
 8000462:	4b4f      	ldr	r3, [pc, #316]	; (80005a0 <fsm_for_input_processing+0x2b4>)
 8000464:	2202      	movs	r2, #2
 8000466:	701a      	strb	r2, [r3, #0]
			break;
 8000468:	e00b      	b.n	8000482 <fsm_for_input_processing+0x196>
			if (!is_button_pressed(BUTTON_FOR_MODE)) {
 800046a:	2000      	movs	r0, #0
 800046c:	f000 faf4 	bl	8000a58 <is_button_pressed>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d107      	bne.n	8000486 <fsm_for_input_processing+0x19a>
				button1State = BUTTON_RELEASED;
 8000476:	4b4a      	ldr	r3, [pc, #296]	; (80005a0 <fsm_for_input_processing+0x2b4>)
 8000478:	2200      	movs	r2, #0
 800047a:	701a      	strb	r2, [r3, #0]
			break;
 800047c:	e003      	b.n	8000486 <fsm_for_input_processing+0x19a>
		default: break;
 800047e:	bf00      	nop
 8000480:	e002      	b.n	8000488 <fsm_for_input_processing+0x19c>
			break;
 8000482:	bf00      	nop
 8000484:	e000      	b.n	8000488 <fsm_for_input_processing+0x19c>
			break;
 8000486:	bf00      	nop
	}

	// Input_processing for button 2
	switch (button2State) {
 8000488:	4b58      	ldr	r3, [pc, #352]	; (80005ec <fsm_for_input_processing+0x300>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b02      	cmp	r3, #2
 800048e:	f000 80c7 	beq.w	8000620 <fsm_for_input_processing+0x334>
 8000492:	2b02      	cmp	r3, #2
 8000494:	f300 8124 	bgt.w	80006e0 <fsm_for_input_processing+0x3f4>
 8000498:	2b00      	cmp	r3, #0
 800049a:	d003      	beq.n	80004a4 <fsm_for_input_processing+0x1b8>
 800049c:	2b01      	cmp	r3, #1
 800049e:	f000 80ab 	beq.w	80005f8 <fsm_for_input_processing+0x30c>
						break;
					default: break;
				}
			}
			break;
		default: break;
 80004a2:	e11d      	b.n	80006e0 <fsm_for_input_processing+0x3f4>
			if (is_button_pressed(BUTTON_FOR_MODIFY)) {
 80004a4:	2001      	movs	r0, #1
 80004a6:	f000 fad7 	bl	8000a58 <is_button_pressed>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d06f      	beq.n	8000590 <fsm_for_input_processing+0x2a4>
				button2State = BUTTON_PRESSED;
 80004b0:	4b4e      	ldr	r3, [pc, #312]	; (80005ec <fsm_for_input_processing+0x300>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	701a      	strb	r2, [r3, #0]
				if (checkTimerFlag(tmr_btn_press) && !button2_toggle_flag) {
 80004b6:	2001      	movs	r0, #1
 80004b8:	f001 f9fe 	bl	80018b8 <checkTimerFlag>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d06a      	beq.n	8000598 <fsm_for_input_processing+0x2ac>
 80004c2:	4b4b      	ldr	r3, [pc, #300]	; (80005f0 <fsm_for_input_processing+0x304>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d166      	bne.n	8000598 <fsm_for_input_processing+0x2ac>
					resetTimer(tmr_btn_press);
 80004ca:	2001      	movs	r0, #1
 80004cc:	f001 f9ca 	bl	8001864 <resetTimer>
					button2_toggle_flag = 1; // Ensure increase only one time
 80004d0:	4b47      	ldr	r3, [pc, #284]	; (80005f0 <fsm_for_input_processing+0x304>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	601a      	str	r2, [r3, #0]
					switch (mode) {
 80004d6:	4b34      	ldr	r3, [pc, #208]	; (80005a8 <fsm_for_input_processing+0x2bc>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	3b01      	subs	r3, #1
 80004dc:	2b03      	cmp	r3, #3
 80004de:	d85d      	bhi.n	800059c <fsm_for_input_processing+0x2b0>
 80004e0:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <fsm_for_input_processing+0x1fc>)
 80004e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e6:	bf00      	nop
 80004e8:	080004f9 	.word	0x080004f9
 80004ec:	08000513 	.word	0x08000513
 80004f0:	0800053d 	.word	0x0800053d
 80004f4:	08000567 	.word	0x08000567
							free_dir = (free_dir + 1) % 2;
 80004f8:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <fsm_for_input_processing+0x2c0>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	2b00      	cmp	r3, #0
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	bfb8      	it	lt
 8000506:	425b      	neglt	r3, r3
 8000508:	4a28      	ldr	r2, [pc, #160]	; (80005ac <fsm_for_input_processing+0x2c0>)
 800050a:	6013      	str	r3, [r2, #0]
							clearAllLeds();
 800050c:	f000 fc2e 	bl	8000d6c <clearAllLeds>
							break;
 8000510:	e045      	b.n	800059e <fsm_for_input_processing+0x2b2>
							red_counter_buffer_temp = (red_counter_buffer_temp + 1) % 100;
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <fsm_for_input_processing+0x2cc>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	4b36      	ldr	r3, [pc, #216]	; (80005f4 <fsm_for_input_processing+0x308>)
 800051a:	fb83 1302 	smull	r1, r3, r3, r2
 800051e:	1159      	asrs	r1, r3, #5
 8000520:	17d3      	asrs	r3, r2, #31
 8000522:	1acb      	subs	r3, r1, r3
 8000524:	2164      	movs	r1, #100	; 0x64
 8000526:	fb01 f303 	mul.w	r3, r1, r3
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	4a22      	ldr	r2, [pc, #136]	; (80005b8 <fsm_for_input_processing+0x2cc>)
 800052e:	6013      	str	r3, [r2, #0]
							updateLedBuffer_1(red_counter_buffer_temp);
 8000530:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <fsm_for_input_processing+0x2cc>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fe2d 	bl	8000194 <updateLedBuffer_1>
							break;
 800053a:	e030      	b.n	800059e <fsm_for_input_processing+0x2b2>
							amber_counter_buffer_temp = (amber_counter_buffer_temp + 1) % 100;
 800053c:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <fsm_for_input_processing+0x2d4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	1c5a      	adds	r2, r3, #1
 8000542:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <fsm_for_input_processing+0x308>)
 8000544:	fb83 1302 	smull	r1, r3, r3, r2
 8000548:	1159      	asrs	r1, r3, #5
 800054a:	17d3      	asrs	r3, r2, #31
 800054c:	1acb      	subs	r3, r1, r3
 800054e:	2164      	movs	r1, #100	; 0x64
 8000550:	fb01 f303 	mul.w	r3, r1, r3
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <fsm_for_input_processing+0x2d4>)
 8000558:	6013      	str	r3, [r2, #0]
							updateLedBuffer_1(amber_counter_buffer_temp);
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <fsm_for_input_processing+0x2d4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fe18 	bl	8000194 <updateLedBuffer_1>
							break;
 8000564:	e01b      	b.n	800059e <fsm_for_input_processing+0x2b2>
							green_counter_buffer_temp = (green_counter_buffer_temp + 1) % 100;
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <fsm_for_input_processing+0x2dc>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <fsm_for_input_processing+0x308>)
 800056e:	fb83 1302 	smull	r1, r3, r3, r2
 8000572:	1159      	asrs	r1, r3, #5
 8000574:	17d3      	asrs	r3, r2, #31
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	2164      	movs	r1, #100	; 0x64
 800057a:	fb01 f303 	mul.w	r3, r1, r3
 800057e:	1ad3      	subs	r3, r2, r3
 8000580:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <fsm_for_input_processing+0x2dc>)
 8000582:	6013      	str	r3, [r2, #0]
							updateLedBuffer_1(green_counter_buffer_temp);
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <fsm_for_input_processing+0x2dc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe03 	bl	8000194 <updateLedBuffer_1>
							break;
 800058e:	e006      	b.n	800059e <fsm_for_input_processing+0x2b2>
			else button2_toggle_flag = 0;
 8000590:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <fsm_for_input_processing+0x304>)
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
			break;
 8000596:	e0a6      	b.n	80006e6 <fsm_for_input_processing+0x3fa>
				}
 8000598:	bf00      	nop
 800059a:	e0a4      	b.n	80006e6 <fsm_for_input_processing+0x3fa>
						default: break;
 800059c:	bf00      	nop
			break;
 800059e:	e0a2      	b.n	80006e6 <fsm_for_input_processing+0x3fa>
 80005a0:	20000188 	.word	0x20000188
 80005a4:	2000017c 	.word	0x2000017c
 80005a8:	2000019c 	.word	0x2000019c
 80005ac:	200001a0 	.word	0x200001a0
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000004 	.word	0x20000004
 80005b8:	20000010 	.word	0x20000010
 80005bc:	20000008 	.word	0x20000008
 80005c0:	20000014 	.word	0x20000014
 80005c4:	2000000c 	.word	0x2000000c
 80005c8:	20000018 	.word	0x20000018
 80005cc:	20000134 	.word	0x20000134
 80005d0:	200001bc 	.word	0x200001bc
 80005d4:	20000138 	.word	0x20000138
 80005d8:	20000144 	.word	0x20000144
 80005dc:	2000013c 	.word	0x2000013c
 80005e0:	20000148 	.word	0x20000148
 80005e4:	20000140 	.word	0x20000140
 80005e8:	2000014c 	.word	0x2000014c
 80005ec:	20000189 	.word	0x20000189
 80005f0:	20000180 	.word	0x20000180
 80005f4:	51eb851f 	.word	0x51eb851f
			if (!is_button_pressed_1s(BUTTON_FOR_MODIFY)) {
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 fa47 	bl	8000a8c <is_button_pressed_1s>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d103      	bne.n	800060c <fsm_for_input_processing+0x320>
				button2State = BUTTON_RELEASED;
 8000604:	4bb0      	ldr	r3, [pc, #704]	; (80008c8 <fsm_for_input_processing+0x5dc>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
			break;
 800060a:	e06b      	b.n	80006e4 <fsm_for_input_processing+0x3f8>
				if (is_button_pressed_1s(BUTTON_FOR_MODIFY)) {
 800060c:	2001      	movs	r0, #1
 800060e:	f000 fa3d 	bl	8000a8c <is_button_pressed_1s>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d065      	beq.n	80006e4 <fsm_for_input_processing+0x3f8>
					button2State = BUTTON_PRESSED_MORE_THAN_1S;
 8000618:	4bab      	ldr	r3, [pc, #684]	; (80008c8 <fsm_for_input_processing+0x5dc>)
 800061a:	2202      	movs	r2, #2
 800061c:	701a      	strb	r2, [r3, #0]
			break;
 800061e:	e061      	b.n	80006e4 <fsm_for_input_processing+0x3f8>
			if (!is_button_pressed(BUTTON_FOR_MODIFY)) {
 8000620:	2001      	movs	r0, #1
 8000622:	f000 fa19 	bl	8000a58 <is_button_pressed>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d102      	bne.n	8000632 <fsm_for_input_processing+0x346>
				button2State = BUTTON_RELEASED;
 800062c:	4ba6      	ldr	r3, [pc, #664]	; (80008c8 <fsm_for_input_processing+0x5dc>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
			if (checkTimerFlag(tmr_btn_hold)) {
 8000632:	2002      	movs	r0, #2
 8000634:	f001 f940 	bl	80018b8 <checkTimerFlag>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d04c      	beq.n	80006d8 <fsm_for_input_processing+0x3ec>
				resetTimer(tmr_btn_hold);
 800063e:	2002      	movs	r0, #2
 8000640:	f001 f910 	bl	8001864 <resetTimer>
				switch (mode) {
 8000644:	4ba1      	ldr	r3, [pc, #644]	; (80008cc <fsm_for_input_processing+0x5e0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b04      	cmp	r3, #4
 800064a:	d030      	beq.n	80006ae <fsm_for_input_processing+0x3c2>
 800064c:	2b04      	cmp	r3, #4
 800064e:	dc45      	bgt.n	80006dc <fsm_for_input_processing+0x3f0>
 8000650:	2b02      	cmp	r3, #2
 8000652:	d002      	beq.n	800065a <fsm_for_input_processing+0x36e>
 8000654:	2b03      	cmp	r3, #3
 8000656:	d015      	beq.n	8000684 <fsm_for_input_processing+0x398>
					default: break;
 8000658:	e040      	b.n	80006dc <fsm_for_input_processing+0x3f0>
						red_counter_buffer_temp = (red_counter_buffer_temp + 1) % 100;
 800065a:	4b9d      	ldr	r3, [pc, #628]	; (80008d0 <fsm_for_input_processing+0x5e4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	4b9c      	ldr	r3, [pc, #624]	; (80008d4 <fsm_for_input_processing+0x5e8>)
 8000662:	fb83 1302 	smull	r1, r3, r3, r2
 8000666:	1159      	asrs	r1, r3, #5
 8000668:	17d3      	asrs	r3, r2, #31
 800066a:	1acb      	subs	r3, r1, r3
 800066c:	2164      	movs	r1, #100	; 0x64
 800066e:	fb01 f303 	mul.w	r3, r1, r3
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	4a96      	ldr	r2, [pc, #600]	; (80008d0 <fsm_for_input_processing+0x5e4>)
 8000676:	6013      	str	r3, [r2, #0]
						updateLedBuffer_1(red_counter_buffer_temp);
 8000678:	4b95      	ldr	r3, [pc, #596]	; (80008d0 <fsm_for_input_processing+0x5e4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fd89 	bl	8000194 <updateLedBuffer_1>
						break;
 8000682:	e02c      	b.n	80006de <fsm_for_input_processing+0x3f2>
						amber_counter_buffer_temp = (amber_counter_buffer_temp + 1) % 100;
 8000684:	4b94      	ldr	r3, [pc, #592]	; (80008d8 <fsm_for_input_processing+0x5ec>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	1c5a      	adds	r2, r3, #1
 800068a:	4b92      	ldr	r3, [pc, #584]	; (80008d4 <fsm_for_input_processing+0x5e8>)
 800068c:	fb83 1302 	smull	r1, r3, r3, r2
 8000690:	1159      	asrs	r1, r3, #5
 8000692:	17d3      	asrs	r3, r2, #31
 8000694:	1acb      	subs	r3, r1, r3
 8000696:	2164      	movs	r1, #100	; 0x64
 8000698:	fb01 f303 	mul.w	r3, r1, r3
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	4a8e      	ldr	r2, [pc, #568]	; (80008d8 <fsm_for_input_processing+0x5ec>)
 80006a0:	6013      	str	r3, [r2, #0]
						updateLedBuffer_1(amber_counter_buffer_temp);
 80006a2:	4b8d      	ldr	r3, [pc, #564]	; (80008d8 <fsm_for_input_processing+0x5ec>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff fd74 	bl	8000194 <updateLedBuffer_1>
						break;
 80006ac:	e017      	b.n	80006de <fsm_for_input_processing+0x3f2>
						green_counter_buffer_temp = (green_counter_buffer_temp + 1) % 100;
 80006ae:	4b8b      	ldr	r3, [pc, #556]	; (80008dc <fsm_for_input_processing+0x5f0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	4b87      	ldr	r3, [pc, #540]	; (80008d4 <fsm_for_input_processing+0x5e8>)
 80006b6:	fb83 1302 	smull	r1, r3, r3, r2
 80006ba:	1159      	asrs	r1, r3, #5
 80006bc:	17d3      	asrs	r3, r2, #31
 80006be:	1acb      	subs	r3, r1, r3
 80006c0:	2164      	movs	r1, #100	; 0x64
 80006c2:	fb01 f303 	mul.w	r3, r1, r3
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	4a84      	ldr	r2, [pc, #528]	; (80008dc <fsm_for_input_processing+0x5f0>)
 80006ca:	6013      	str	r3, [r2, #0]
						updateLedBuffer_1(green_counter_buffer_temp);
 80006cc:	4b83      	ldr	r3, [pc, #524]	; (80008dc <fsm_for_input_processing+0x5f0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fd5f 	bl	8000194 <updateLedBuffer_1>
						break;
 80006d6:	e002      	b.n	80006de <fsm_for_input_processing+0x3f2>
			}
 80006d8:	bf00      	nop
 80006da:	e004      	b.n	80006e6 <fsm_for_input_processing+0x3fa>
					default: break;
 80006dc:	bf00      	nop
			break;
 80006de:	e002      	b.n	80006e6 <fsm_for_input_processing+0x3fa>
		default: break;
 80006e0:	bf00      	nop
 80006e2:	e000      	b.n	80006e6 <fsm_for_input_processing+0x3fa>
			break;
 80006e4:	bf00      	nop
	}

	// Input_processing for button 3
	switch (button3State) {
 80006e6:	4b7e      	ldr	r3, [pc, #504]	; (80008e0 <fsm_for_input_processing+0x5f4>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d061      	beq.n	80007b2 <fsm_for_input_processing+0x4c6>
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	dc69      	bgt.n	80007c6 <fsm_for_input_processing+0x4da>
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <fsm_for_input_processing+0x410>
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d00e      	beq.n	8000718 <fsm_for_input_processing+0x42c>
		case BUTTON_PRESSED_MORE_THAN_1S:
			if (!is_button_pressed(BUTTON_FOR_CONFIRM)) {
				button3State = BUTTON_RELEASED;
			}
			break;
		default: break;
 80006fa:	e064      	b.n	80007c6 <fsm_for_input_processing+0x4da>
			if (is_button_pressed(BUTTON_FOR_CONFIRM)) {
 80006fc:	2002      	movs	r0, #2
 80006fe:	f000 f9ab 	bl	8000a58 <is_button_pressed>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d003      	beq.n	8000710 <fsm_for_input_processing+0x424>
				button3State = BUTTON_PRESSED;
 8000708:	4b75      	ldr	r3, [pc, #468]	; (80008e0 <fsm_for_input_processing+0x5f4>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
			break;
 800070e:	e05f      	b.n	80007d0 <fsm_for_input_processing+0x4e4>
			else button3_toggle_flag = 0;
 8000710:	4b74      	ldr	r3, [pc, #464]	; (80008e4 <fsm_for_input_processing+0x5f8>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
			break;
 8000716:	e05b      	b.n	80007d0 <fsm_for_input_processing+0x4e4>
			if (checkTimerFlag(tmr_btn_press) && !button3_toggle_flag) {
 8000718:	2001      	movs	r0, #1
 800071a:	f001 f8cd 	bl	80018b8 <checkTimerFlag>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d032      	beq.n	800078a <fsm_for_input_processing+0x49e>
 8000724:	4b6f      	ldr	r3, [pc, #444]	; (80008e4 <fsm_for_input_processing+0x5f8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d12e      	bne.n	800078a <fsm_for_input_processing+0x49e>
				resetTimer(tmr_btn_press);
 800072c:	2001      	movs	r0, #1
 800072e:	f001 f899 	bl	8001864 <resetTimer>
				button3_toggle_flag = 1;
 8000732:	4b6c      	ldr	r3, [pc, #432]	; (80008e4 <fsm_for_input_processing+0x5f8>)
 8000734:	2201      	movs	r2, #1
 8000736:	601a      	str	r2, [r3, #0]
				switch (mode) {
 8000738:	4b64      	ldr	r3, [pc, #400]	; (80008cc <fsm_for_input_processing+0x5e0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	3b01      	subs	r3, #1
 800073e:	2b03      	cmp	r3, #3
 8000740:	d81d      	bhi.n	800077e <fsm_for_input_processing+0x492>
 8000742:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <fsm_for_input_processing+0x45c>)
 8000744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000748:	08000759 	.word	0x08000759
 800074c:	08000761 	.word	0x08000761
 8000750:	0800076b 	.word	0x0800076b
 8000754:	08000775 	.word	0x08000775
						mode = AUTOMATIC;
 8000758:	4b5c      	ldr	r3, [pc, #368]	; (80008cc <fsm_for_input_processing+0x5e0>)
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
						break;
 800075e:	e00f      	b.n	8000780 <fsm_for_input_processing+0x494>
						red_counter_buffer = red_counter_buffer_temp;
 8000760:	4b5b      	ldr	r3, [pc, #364]	; (80008d0 <fsm_for_input_processing+0x5e4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a60      	ldr	r2, [pc, #384]	; (80008e8 <fsm_for_input_processing+0x5fc>)
 8000766:	6013      	str	r3, [r2, #0]
						break;
 8000768:	e00a      	b.n	8000780 <fsm_for_input_processing+0x494>
						amber_counter_buffer = amber_counter_buffer_temp;
 800076a:	4b5b      	ldr	r3, [pc, #364]	; (80008d8 <fsm_for_input_processing+0x5ec>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a5f      	ldr	r2, [pc, #380]	; (80008ec <fsm_for_input_processing+0x600>)
 8000770:	6013      	str	r3, [r2, #0]
						break;
 8000772:	e005      	b.n	8000780 <fsm_for_input_processing+0x494>
						green_counter_buffer = green_counter_buffer_temp;
 8000774:	4b59      	ldr	r3, [pc, #356]	; (80008dc <fsm_for_input_processing+0x5f0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a5d      	ldr	r2, [pc, #372]	; (80008f0 <fsm_for_input_processing+0x604>)
 800077a:	6013      	str	r3, [r2, #0]
						break;
 800077c:	e000      	b.n	8000780 <fsm_for_input_processing+0x494>
					default: break;
 800077e:	bf00      	nop
				balanceCounterInMode(mode);
 8000780:	4b52      	ldr	r3, [pc, #328]	; (80008cc <fsm_for_input_processing+0x5e0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fd47 	bl	8000218 <balanceCounterInMode>
			if (!is_button_pressed_1s(BUTTON_FOR_CONFIRM)) {
 800078a:	2002      	movs	r0, #2
 800078c:	f000 f97e 	bl	8000a8c <is_button_pressed_1s>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d103      	bne.n	800079e <fsm_for_input_processing+0x4b2>
				button3State = BUTTON_RELEASED;
 8000796:	4b52      	ldr	r3, [pc, #328]	; (80008e0 <fsm_for_input_processing+0x5f4>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
			break;
 800079c:	e015      	b.n	80007ca <fsm_for_input_processing+0x4de>
				if (is_button_pressed_1s(BUTTON_FOR_CONFIRM)) {
 800079e:	2002      	movs	r0, #2
 80007a0:	f000 f974 	bl	8000a8c <is_button_pressed_1s>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d00f      	beq.n	80007ca <fsm_for_input_processing+0x4de>
					button3State = BUTTON_PRESSED_MORE_THAN_1S;
 80007aa:	4b4d      	ldr	r3, [pc, #308]	; (80008e0 <fsm_for_input_processing+0x5f4>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	701a      	strb	r2, [r3, #0]
			break;
 80007b0:	e00b      	b.n	80007ca <fsm_for_input_processing+0x4de>
			if (!is_button_pressed(BUTTON_FOR_CONFIRM)) {
 80007b2:	2002      	movs	r0, #2
 80007b4:	f000 f950 	bl	8000a58 <is_button_pressed>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d107      	bne.n	80007ce <fsm_for_input_processing+0x4e2>
				button3State = BUTTON_RELEASED;
 80007be:	4b48      	ldr	r3, [pc, #288]	; (80008e0 <fsm_for_input_processing+0x5f4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
			break;
 80007c4:	e003      	b.n	80007ce <fsm_for_input_processing+0x4e2>
		default: break;
 80007c6:	bf00      	nop
 80007c8:	e002      	b.n	80007d0 <fsm_for_input_processing+0x4e4>
			break;
 80007ca:	bf00      	nop
 80007cc:	e000      	b.n	80007d0 <fsm_for_input_processing+0x4e4>
			break;
 80007ce:	bf00      	nop
	/* Input_processing for button 4
	 * + If pressed: 		act as an undo button
	 * + If long-pressed: 	act as a reset button
	 * */

	switch (button4State) {
 80007d0:	4b48      	ldr	r3, [pc, #288]	; (80008f4 <fsm_for_input_processing+0x608>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	f000 808f 	beq.w	80008f8 <fsm_for_input_processing+0x60c>
 80007da:	2b02      	cmp	r3, #2
 80007dc:	f300 8096 	bgt.w	800090c <fsm_for_input_processing+0x620>
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <fsm_for_input_processing+0x4fe>
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d04c      	beq.n	8000882 <fsm_for_input_processing+0x596>
		case BUTTON_PRESSED_MORE_THAN_1S:
			if (!is_button_pressed(BUTTON_FOR_RESET)) {
				button4State = BUTTON_RELEASED;
			}
			break;
		default: break;
 80007e8:	e090      	b.n	800090c <fsm_for_input_processing+0x620>
			if (is_button_pressed(BUTTON_FOR_RESET)) {
 80007ea:	2003      	movs	r0, #3
 80007ec:	f000 f934 	bl	8000a58 <is_button_pressed>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f000 808c 	beq.w	8000910 <fsm_for_input_processing+0x624>
				button4State = BUTTON_PRESSED;
 80007f8:	4b3e      	ldr	r3, [pc, #248]	; (80008f4 <fsm_for_input_processing+0x608>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
				switch (mode) {
 80007fe:	4b33      	ldr	r3, [pc, #204]	; (80008cc <fsm_for_input_processing+0x5e0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b04      	cmp	r3, #4
 8000804:	d82f      	bhi.n	8000866 <fsm_for_input_processing+0x57a>
 8000806:	a201      	add	r2, pc, #4	; (adr r2, 800080c <fsm_for_input_processing+0x520>)
 8000808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080c:	08000821 	.word	0x08000821
 8000810:	08000867 	.word	0x08000867
 8000814:	08000825 	.word	0x08000825
 8000818:	0800083b 	.word	0x0800083b
 800081c:	08000851 	.word	0x08000851
						resetState();
 8000820:	f000 fbcc 	bl	8000fbc <resetState>
						red_counter_buffer_temp = red_counter_buffer;
 8000824:	4b30      	ldr	r3, [pc, #192]	; (80008e8 <fsm_for_input_processing+0x5fc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <fsm_for_input_processing+0x5e4>)
 800082a:	6013      	str	r3, [r2, #0]
						updateLedBuffer_1(red_counter_buffer_temp - 1);
 800082c:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <fsm_for_input_processing+0x5e4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3b01      	subs	r3, #1
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fcae 	bl	8000194 <updateLedBuffer_1>
						break;
 8000838:	e016      	b.n	8000868 <fsm_for_input_processing+0x57c>
						amber_counter_buffer_temp = amber_counter_buffer;
 800083a:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <fsm_for_input_processing+0x600>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a26      	ldr	r2, [pc, #152]	; (80008d8 <fsm_for_input_processing+0x5ec>)
 8000840:	6013      	str	r3, [r2, #0]
						updateLedBuffer_1(amber_counter_buffer_temp - 1);
 8000842:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <fsm_for_input_processing+0x5ec>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3b01      	subs	r3, #1
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fca3 	bl	8000194 <updateLedBuffer_1>
						break;
 800084e:	e00b      	b.n	8000868 <fsm_for_input_processing+0x57c>
						green_counter_buffer_temp = green_counter_buffer;
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <fsm_for_input_processing+0x604>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a21      	ldr	r2, [pc, #132]	; (80008dc <fsm_for_input_processing+0x5f0>)
 8000856:	6013      	str	r3, [r2, #0]
						updateLedBuffer_1(green_counter_buffer_temp - 1);
 8000858:	4b20      	ldr	r3, [pc, #128]	; (80008dc <fsm_for_input_processing+0x5f0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	3b01      	subs	r3, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fc98 	bl	8000194 <updateLedBuffer_1>
						break;
 8000864:	e000      	b.n	8000868 <fsm_for_input_processing+0x57c>
					default: break;
 8000866:	bf00      	nop
				for (int i = 0; i < N0_OF_TIMERS; ++i) {
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	e005      	b.n	800087a <fsm_for_input_processing+0x58e>
					resetTimer(i);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f000 fff8 	bl	8001864 <resetTimer>
				for (int i = 0; i < N0_OF_TIMERS; ++i) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3301      	adds	r3, #1
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b05      	cmp	r3, #5
 800087e:	ddf6      	ble.n	800086e <fsm_for_input_processing+0x582>
			break;
 8000880:	e046      	b.n	8000910 <fsm_for_input_processing+0x624>
			if (!is_button_pressed_1s(BUTTON_FOR_RESET)) {
 8000882:	2003      	movs	r0, #3
 8000884:	f000 f902 	bl	8000a8c <is_button_pressed_1s>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d103      	bne.n	8000896 <fsm_for_input_processing+0x5aa>
				button4State = BUTTON_RELEASED;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <fsm_for_input_processing+0x608>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
			break;
 8000894:	e03e      	b.n	8000914 <fsm_for_input_processing+0x628>
				if (is_button_pressed_1s(BUTTON_FOR_RESET)) {
 8000896:	2003      	movs	r0, #3
 8000898:	f000 f8f8 	bl	8000a8c <is_button_pressed_1s>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d038      	beq.n	8000914 <fsm_for_input_processing+0x628>
					button4State = BUTTON_PRESSED_MORE_THAN_1S;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <fsm_for_input_processing+0x608>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	701a      	strb	r2, [r3, #0]
					defaultState();
 80008a8:	f000 faf8 	bl	8000e9c <defaultState>
					for (int i = 0; i < N0_OF_TIMERS; ++i) {
 80008ac:	2300      	movs	r3, #0
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	e005      	b.n	80008be <fsm_for_input_processing+0x5d2>
						resetTimer(i);
 80008b2:	6838      	ldr	r0, [r7, #0]
 80008b4:	f000 ffd6 	bl	8001864 <resetTimer>
					for (int i = 0; i < N0_OF_TIMERS; ++i) {
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	3301      	adds	r3, #1
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	2b05      	cmp	r3, #5
 80008c2:	ddf6      	ble.n	80008b2 <fsm_for_input_processing+0x5c6>
			break;
 80008c4:	e026      	b.n	8000914 <fsm_for_input_processing+0x628>
 80008c6:	bf00      	nop
 80008c8:	20000189 	.word	0x20000189
 80008cc:	2000019c 	.word	0x2000019c
 80008d0:	20000010 	.word	0x20000010
 80008d4:	51eb851f 	.word	0x51eb851f
 80008d8:	20000014 	.word	0x20000014
 80008dc:	20000018 	.word	0x20000018
 80008e0:	2000018a 	.word	0x2000018a
 80008e4:	20000184 	.word	0x20000184
 80008e8:	20000004 	.word	0x20000004
 80008ec:	20000008 	.word	0x20000008
 80008f0:	2000000c 	.word	0x2000000c
 80008f4:	2000018b 	.word	0x2000018b
			if (!is_button_pressed(BUTTON_FOR_RESET)) {
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f8ad 	bl	8000a58 <is_button_pressed>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d109      	bne.n	8000918 <fsm_for_input_processing+0x62c>
				button4State = BUTTON_RELEASED;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <fsm_for_input_processing+0x638>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
			break;
 800090a:	e005      	b.n	8000918 <fsm_for_input_processing+0x62c>
		default: break;
 800090c:	bf00      	nop
 800090e:	e004      	b.n	800091a <fsm_for_input_processing+0x62e>
			break;
 8000910:	bf00      	nop
 8000912:	e002      	b.n	800091a <fsm_for_input_processing+0x62e>
			break;
 8000914:	bf00      	nop
 8000916:	e000      	b.n	800091a <fsm_for_input_processing+0x62e>
			break;
 8000918:	bf00      	nop
	}
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2000018b 	.word	0x2000018b

08000928 <button_reading>:
static GPIO_PinState debounceButtonBuffer2[N0_OF_BUTTONS];

static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void) {
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
	for (Button_t button_id = 0; button_id < N0_OF_BUTTONS; ++button_id) {
 800092e:	2300      	movs	r3, #0
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	e07a      	b.n	8000a2a <button_reading+0x102>

		debounceButtonBuffer2[button_id] = debounceButtonBuffer1[button_id];
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	4940      	ldr	r1, [pc, #256]	; (8000a3c <button_reading+0x114>)
 800093a:	5c89      	ldrb	r1, [r1, r2]
 800093c:	4a40      	ldr	r2, [pc, #256]	; (8000a40 <button_reading+0x118>)
 800093e:	54d1      	strb	r1, [r2, r3]

		switch (button_id) {
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b03      	cmp	r3, #3
 8000944:	d833      	bhi.n	80009ae <button_reading+0x86>
 8000946:	a201      	add	r2, pc, #4	; (adr r2, 800094c <button_reading+0x24>)
 8000948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094c:	0800095d 	.word	0x0800095d
 8000950:	08000971 	.word	0x08000971
 8000954:	08000985 	.word	0x08000985
 8000958:	08000999 	.word	0x08000999
			case 0: debounceButtonBuffer1[button_id] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin); break;
 800095c:	79fc      	ldrb	r4, [r7, #7]
 800095e:	2101      	movs	r1, #1
 8000960:	4838      	ldr	r0, [pc, #224]	; (8000a44 <button_reading+0x11c>)
 8000962:	f001 fb31 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8000966:	4603      	mov	r3, r0
 8000968:	461a      	mov	r2, r3
 800096a:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <button_reading+0x114>)
 800096c:	551a      	strb	r2, [r3, r4]
 800096e:	e01f      	b.n	80009b0 <button_reading+0x88>
			case 1: debounceButtonBuffer1[button_id] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin); break;
 8000970:	79fc      	ldrb	r4, [r7, #7]
 8000972:	2102      	movs	r1, #2
 8000974:	4833      	ldr	r0, [pc, #204]	; (8000a44 <button_reading+0x11c>)
 8000976:	f001 fb27 	bl	8001fc8 <HAL_GPIO_ReadPin>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <button_reading+0x114>)
 8000980:	551a      	strb	r2, [r3, r4]
 8000982:	e015      	b.n	80009b0 <button_reading+0x88>
			case 2: debounceButtonBuffer1[button_id] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin); break;
 8000984:	79fc      	ldrb	r4, [r7, #7]
 8000986:	2104      	movs	r1, #4
 8000988:	482e      	ldr	r0, [pc, #184]	; (8000a44 <button_reading+0x11c>)
 800098a:	f001 fb1d 	bl	8001fc8 <HAL_GPIO_ReadPin>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <button_reading+0x114>)
 8000994:	551a      	strb	r2, [r3, r4]
 8000996:	e00b      	b.n	80009b0 <button_reading+0x88>
			case 3: debounceButtonBuffer1[button_id] = HAL_GPIO_ReadPin(RESET_BUTTON_GPIO_Port, RESET_BUTTON_Pin); break;
 8000998:	79fc      	ldrb	r4, [r7, #7]
 800099a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800099e:	482a      	ldr	r0, [pc, #168]	; (8000a48 <button_reading+0x120>)
 80009a0:	f001 fb12 	bl	8001fc8 <HAL_GPIO_ReadPin>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <button_reading+0x114>)
 80009aa:	551a      	strb	r2, [r3, r4]
 80009ac:	e000      	b.n	80009b0 <button_reading+0x88>
			default:
				break;
 80009ae:	bf00      	nop
		}

		if (debounceButtonBuffer1[button_id] == debounceButtonBuffer2[button_id]) {
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	4a22      	ldr	r2, [pc, #136]	; (8000a3c <button_reading+0x114>)
 80009b4:	5cd2      	ldrb	r2, [r2, r3]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4921      	ldr	r1, [pc, #132]	; (8000a40 <button_reading+0x118>)
 80009ba:	5ccb      	ldrb	r3, [r1, r3]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d131      	bne.n	8000a24 <button_reading+0xfc>

			buttonBuffer[button_id] = debounceButtonBuffer1[button_id];
 80009c0:	79fa      	ldrb	r2, [r7, #7]
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	491d      	ldr	r1, [pc, #116]	; (8000a3c <button_reading+0x114>)
 80009c6:	5c89      	ldrb	r1, [r1, r2]
 80009c8:	4a20      	ldr	r2, [pc, #128]	; (8000a4c <button_reading+0x124>)
 80009ca:	54d1      	strb	r1, [r2, r3]

			if (buttonBuffer[button_id] == BUTTON_IS_PRESSED) {
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <button_reading+0x124>)
 80009d0:	5cd3      	ldrb	r3, [r2, r3]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d11d      	bne.n	8000a12 <button_reading+0xea>
				if (flagForButtonPress1s[button_id] == 0) {
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <button_reading+0x128>)
 80009da:	5cd3      	ldrb	r3, [r2, r3]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d108      	bne.n	80009f2 <button_reading+0xca>
					--counterForButtonPress1s[button_id];
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <button_reading+0x12c>)
 80009e4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009e8:	3a01      	subs	r2, #1
 80009ea:	b291      	uxth	r1, r2
 80009ec:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <button_reading+0x12c>)
 80009ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}
				if (counterForButtonPress1s[button_id] <= 0) {
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <button_reading+0x12c>)
 80009f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d112      	bne.n	8000a24 <button_reading+0xfc>
					flagForButtonPress1s[button_id] = 1;
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <button_reading+0x128>)
 8000a02:	2101      	movs	r1, #1
 8000a04:	54d1      	strb	r1, [r2, r3]
					counterForButtonPress1s[button_id] = DURATION_FOR_AUTO_INCREASE;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <button_reading+0x12c>)
 8000a0a:	2164      	movs	r1, #100	; 0x64
 8000a0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a10:	e008      	b.n	8000a24 <button_reading+0xfc>
				}
			} else { // Reset
				counterForButtonPress1s[button_id] = DURATION_FOR_AUTO_INCREASE;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <button_reading+0x12c>)
 8000a16:	2164      	movs	r1, #100	; 0x64
 8000a18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[button_id] = 0;
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	4a0c      	ldr	r2, [pc, #48]	; (8000a50 <button_reading+0x128>)
 8000a20:	2100      	movs	r1, #0
 8000a22:	54d1      	strb	r1, [r2, r3]
	for (Button_t button_id = 0; button_id < N0_OF_BUTTONS; ++button_id) {
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	3301      	adds	r3, #1
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	d981      	bls.n	8000934 <button_reading+0xc>
			}
		}
	}
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd90      	pop	{r4, r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200001a8 	.word	0x200001a8
 8000a40:	200001ac 	.word	0x200001ac
 8000a44:	40010c00 	.word	0x40010c00
 8000a48:	40010800 	.word	0x40010800
 8000a4c:	200001a4 	.word	0x200001a4
 8000a50:	200001b0 	.word	0x200001b0
 8000a54:	200001b4 	.word	0x200001b4

08000a58 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char index) {
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d901      	bls.n	8000a6c <is_button_pressed+0x14>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	e007      	b.n	8000a7c <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <is_button_pressed+0x30>)
 8000a70:	5cd3      	ldrb	r3, [r2, r3]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf0c      	ite	eq
 8000a76:	2301      	moveq	r3, #1
 8000a78:	2300      	movne	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	200001a4 	.word	0x200001a4

08000a8c <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index) {
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d901      	bls.n	8000aa0 <is_button_pressed_1s+0x14>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e007      	b.n	8000ab0 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4a06      	ldr	r2, [pc, #24]	; (8000abc <is_button_pressed_1s+0x30>)
 8000aa4:	5cd3      	ldrb	r3, [r2, r3]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	bf0c      	ite	eq
 8000aaa:	2301      	moveq	r3, #1
 8000aac:	2300      	movne	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200001b0 	.word	0x200001b0

08000ac0 <display7SEG_0>:
int green_counter_0 = DEFAULT_GREEN_COUNTER;
int red_counter_1 = DEFAULT_RED_COUNTER;
int amber_counter_1 = DEFAULT_AMBER_COUNTER;
int green_counter_1 = DEFAULT_GREEN_COUNTER;

void display7SEG_0(int num) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SEG_A_0_GPIO_Port, SEG_A_0_Pin, digitSegment[num][0]);
 8000ac8:	4938      	ldr	r1, [pc, #224]	; (8000bac <display7SEG_0+0xec>)
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	4613      	mov	r3, r2
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	1a9b      	subs	r3, r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	461a      	mov	r2, r3
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	4834      	ldr	r0, [pc, #208]	; (8000bb0 <display7SEG_0+0xf0>)
 8000ae0:	f001 fa89 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_0_GPIO_Port, SEG_B_0_Pin, digitSegment[num][1]);
 8000ae4:	4931      	ldr	r1, [pc, #196]	; (8000bac <display7SEG_0+0xec>)
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	1a9b      	subs	r3, r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	440b      	add	r3, r1
 8000af2:	3304      	adds	r3, #4
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	461a      	mov	r2, r3
 8000afa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afe:	482c      	ldr	r0, [pc, #176]	; (8000bb0 <display7SEG_0+0xf0>)
 8000b00:	f001 fa79 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_0_GPIO_Port, SEG_C_0_Pin, digitSegment[num][2]);
 8000b04:	4929      	ldr	r1, [pc, #164]	; (8000bac <display7SEG_0+0xec>)
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	1a9b      	subs	r3, r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	440b      	add	r3, r1
 8000b12:	3308      	adds	r3, #8
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1e:	4824      	ldr	r0, [pc, #144]	; (8000bb0 <display7SEG_0+0xf0>)
 8000b20:	f001 fa69 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_0_GPIO_Port, SEG_D_0_Pin, digitSegment[num][3]);
 8000b24:	4921      	ldr	r1, [pc, #132]	; (8000bac <display7SEG_0+0xec>)
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	1a9b      	subs	r3, r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	440b      	add	r3, r1
 8000b32:	330c      	adds	r3, #12
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	461a      	mov	r2, r3
 8000b3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3e:	481c      	ldr	r0, [pc, #112]	; (8000bb0 <display7SEG_0+0xf0>)
 8000b40:	f001 fa59 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_0_GPIO_Port, SEG_E_0_Pin, digitSegment[num][4]);
 8000b44:	4919      	ldr	r1, [pc, #100]	; (8000bac <display7SEG_0+0xec>)
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	1a9b      	subs	r3, r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	440b      	add	r3, r1
 8000b52:	3310      	adds	r3, #16
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	461a      	mov	r2, r3
 8000b5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b5e:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <display7SEG_0+0xf0>)
 8000b60:	f001 fa49 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_0_GPIO_Port, SEG_F_0_Pin, digitSegment[num][5]);
 8000b64:	4911      	ldr	r1, [pc, #68]	; (8000bac <display7SEG_0+0xec>)
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	1a9b      	subs	r3, r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	440b      	add	r3, r1
 8000b72:	3314      	adds	r3, #20
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <display7SEG_0+0xf0>)
 8000b80:	f001 fa39 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_0_GPIO_Port, SEG_G_0_Pin, digitSegment[num][6]);
 8000b84:	4909      	ldr	r1, [pc, #36]	; (8000bac <display7SEG_0+0xec>)
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	1a9b      	subs	r3, r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	440b      	add	r3, r1
 8000b92:	3318      	adds	r3, #24
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9e:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <display7SEG_0+0xf0>)
 8000ba0:	f001 fa29 	bl	8001ff6 <HAL_GPIO_WritePin>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000001c 	.word	0x2000001c
 8000bb0:	40010800 	.word	0x40010800

08000bb4 <display7SEG_1>:

void display7SEG_1(int num) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, digitSegment[num][0]);
 8000bbc:	4939      	ldr	r1, [pc, #228]	; (8000ca4 <display7SEG_1+0xf0>)
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	1a9b      	subs	r3, r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	440b      	add	r3, r1
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd4:	4834      	ldr	r0, [pc, #208]	; (8000ca8 <display7SEG_1+0xf4>)
 8000bd6:	f001 fa0e 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, digitSegment[num][1]);
 8000bda:	4932      	ldr	r1, [pc, #200]	; (8000ca4 <display7SEG_1+0xf0>)
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	4613      	mov	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	3304      	adds	r3, #4
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf4:	482c      	ldr	r0, [pc, #176]	; (8000ca8 <display7SEG_1+0xf4>)
 8000bf6:	f001 f9fe 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, digitSegment[num][2]);
 8000bfa:	492a      	ldr	r1, [pc, #168]	; (8000ca4 <display7SEG_1+0xf0>)
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	440b      	add	r3, r1
 8000c08:	3308      	adds	r3, #8
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c14:	4824      	ldr	r0, [pc, #144]	; (8000ca8 <display7SEG_1+0xf4>)
 8000c16:	f001 f9ee 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, digitSegment[num][3]);
 8000c1a:	4922      	ldr	r1, [pc, #136]	; (8000ca4 <display7SEG_1+0xf0>)
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	1a9b      	subs	r3, r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	440b      	add	r3, r1
 8000c28:	330c      	adds	r3, #12
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	461a      	mov	r2, r3
 8000c30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c34:	481c      	ldr	r0, [pc, #112]	; (8000ca8 <display7SEG_1+0xf4>)
 8000c36:	f001 f9de 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_1_GPIO_Port, SEG_E_1_Pin, digitSegment[num][4]);
 8000c3a:	491a      	ldr	r1, [pc, #104]	; (8000ca4 <display7SEG_1+0xf0>)
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	1a9b      	subs	r3, r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	440b      	add	r3, r1
 8000c48:	3310      	adds	r3, #16
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c54:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <display7SEG_1+0xf4>)
 8000c56:	f001 f9ce 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_1_GPIO_Port, SEG_F_1_Pin, digitSegment[num][5]);
 8000c5a:	4912      	ldr	r1, [pc, #72]	; (8000ca4 <display7SEG_1+0xf0>)
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	440b      	add	r3, r1
 8000c68:	3314      	adds	r3, #20
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <display7SEG_1+0xf4>)
 8000c76:	f001 f9be 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_1_GPIO_Port, SEG_G_1_Pin, digitSegment[num][6]);
 8000c7a:	490a      	ldr	r1, [pc, #40]	; (8000ca4 <display7SEG_1+0xf0>)
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	1a9b      	subs	r3, r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	440b      	add	r3, r1
 8000c88:	3318      	adds	r3, #24
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <display7SEG_1+0xf4>)
 8000c96:	f001 f9ae 	bl	8001ff6 <HAL_GPIO_WritePin>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000001c 	.word	0x2000001c
 8000ca8:	40010c00 	.word	0x40010c00

08000cac <update7SEG_0>:

void update7SEG_0(int index) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	// Turn off all EN0-1
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, OFF);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	4812      	ldr	r0, [pc, #72]	; (8000d04 <update7SEG_0+0x58>)
 8000cba:	f001 f99c 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, OFF);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	4810      	ldr	r0, [pc, #64]	; (8000d04 <update7SEG_0+0x58>)
 8000cc4:	f001 f997 	bl	8001ff6 <HAL_GPIO_WritePin>

	display7SEG_0(led_buffer_0[index]);
 8000cc8:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <update7SEG_0+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fef5 	bl	8000ac0 <display7SEG_0>
	switch(index) {
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <update7SEG_0+0x38>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d006      	beq.n	8000cf0 <update7SEG_0+0x44>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, ON);
			break;
		case 1:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, ON);
			break;
		default: break;
 8000ce2:	e00b      	b.n	8000cfc <update7SEG_0+0x50>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, ON);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <update7SEG_0+0x58>)
 8000cea:	f001 f984 	bl	8001ff6 <HAL_GPIO_WritePin>
			break;
 8000cee:	e005      	b.n	8000cfc <update7SEG_0+0x50>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, ON);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <update7SEG_0+0x58>)
 8000cf6:	f001 f97e 	bl	8001ff6 <HAL_GPIO_WritePin>
			break;
 8000cfa:	bf00      	nop
	}

}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40010c00 	.word	0x40010c00
 8000d08:	2000018c 	.word	0x2000018c

08000d0c <update7SEG_1>:

void update7SEG_1(int index) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, OFF);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2140      	movs	r1, #64	; 0x40
 8000d18:	4812      	ldr	r0, [pc, #72]	; (8000d64 <update7SEG_1+0x58>)
 8000d1a:	f001 f96c 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, OFF);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	4810      	ldr	r0, [pc, #64]	; (8000d64 <update7SEG_1+0x58>)
 8000d24:	f001 f967 	bl	8001ff6 <HAL_GPIO_WritePin>

	display7SEG_1(led_buffer_1[index]);
 8000d28:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <update7SEG_1+0x5c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff3f 	bl	8000bb4 <display7SEG_1>
	switch(index) {
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <update7SEG_1+0x38>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d006      	beq.n	8000d50 <update7SEG_1+0x44>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, ON);
			break;
		case 1:
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, ON);
			break;
		default: break;
 8000d42:	e00b      	b.n	8000d5c <update7SEG_1+0x50>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, ON);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2140      	movs	r1, #64	; 0x40
 8000d48:	4806      	ldr	r0, [pc, #24]	; (8000d64 <update7SEG_1+0x58>)
 8000d4a:	f001 f954 	bl	8001ff6 <HAL_GPIO_WritePin>
			break;
 8000d4e:	e005      	b.n	8000d5c <update7SEG_1+0x50>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, ON);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	4803      	ldr	r0, [pc, #12]	; (8000d64 <update7SEG_1+0x58>)
 8000d56:	f001 f94e 	bl	8001ff6 <HAL_GPIO_WritePin>
			break;
 8000d5a:	bf00      	nop
	}
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40010c00 	.word	0x40010c00
 8000d68:	20000194 	.word	0x20000194

08000d6c <clearAllLeds>:

void clearAllLeds(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2102      	movs	r1, #2
 8000d74:	480e      	ldr	r0, [pc, #56]	; (8000db0 <clearAllLeds+0x44>)
 8000d76:	f001 f93e 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_0_GPIO_Port, LED_AMBER_0_Pin, SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	480c      	ldr	r0, [pc, #48]	; (8000db0 <clearAllLeds+0x44>)
 8000d80:	f001 f939 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2108      	movs	r1, #8
 8000d88:	4809      	ldr	r0, [pc, #36]	; (8000db0 <clearAllLeds+0x44>)
 8000d8a:	f001 f934 	bl	8001ff6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2110      	movs	r1, #16
 8000d92:	4807      	ldr	r0, [pc, #28]	; (8000db0 <clearAllLeds+0x44>)
 8000d94:	f001 f92f 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2120      	movs	r1, #32
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <clearAllLeds+0x44>)
 8000d9e:	f001 f92a 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2140      	movs	r1, #64	; 0x40
 8000da6:	4802      	ldr	r0, [pc, #8]	; (8000db0 <clearAllLeds+0x44>)
 8000da8:	f001 f925 	bl	8001ff6 <HAL_GPIO_WritePin>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40010800 	.word	0x40010800

08000db4 <displayLED_0>:

void displayLED_0(int status) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, OFF);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	4818      	ldr	r0, [pc, #96]	; (8000e24 <displayLED_0+0x70>)
 8000dc2:	f001 f918 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_0_GPIO_Port, LED_AMBER_0_Pin, OFF);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2104      	movs	r1, #4
 8000dca:	4816      	ldr	r0, [pc, #88]	; (8000e24 <displayLED_0+0x70>)
 8000dcc:	f001 f913 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, OFF);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2108      	movs	r1, #8
 8000dd4:	4813      	ldr	r0, [pc, #76]	; (8000e24 <displayLED_0+0x70>)
 8000dd6:	f001 f90e 	bl	8001ff6 <HAL_GPIO_WritePin>

	switch (status) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d015      	beq.n	8000e0c <displayLED_0+0x58>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	dc18      	bgt.n	8000e18 <displayLED_0+0x64>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <displayLED_0+0x40>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d006      	beq.n	8000e00 <displayLED_0+0x4c>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, ON); break;
		case AMBER:
			HAL_GPIO_WritePin(LED_AMBER_0_GPIO_Port, LED_AMBER_0_Pin, ON); break;
		case GREEN:
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, ON); break;
		default: break;
 8000df2:	e011      	b.n	8000e18 <displayLED_0+0x64>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, ON); break;
 8000df4:	2200      	movs	r2, #0
 8000df6:	2102      	movs	r1, #2
 8000df8:	480a      	ldr	r0, [pc, #40]	; (8000e24 <displayLED_0+0x70>)
 8000dfa:	f001 f8fc 	bl	8001ff6 <HAL_GPIO_WritePin>
 8000dfe:	e00c      	b.n	8000e1a <displayLED_0+0x66>
			HAL_GPIO_WritePin(LED_AMBER_0_GPIO_Port, LED_AMBER_0_Pin, ON); break;
 8000e00:	2200      	movs	r2, #0
 8000e02:	2104      	movs	r1, #4
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <displayLED_0+0x70>)
 8000e06:	f001 f8f6 	bl	8001ff6 <HAL_GPIO_WritePin>
 8000e0a:	e006      	b.n	8000e1a <displayLED_0+0x66>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, ON); break;
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2108      	movs	r1, #8
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <displayLED_0+0x70>)
 8000e12:	f001 f8f0 	bl	8001ff6 <HAL_GPIO_WritePin>
 8000e16:	e000      	b.n	8000e1a <displayLED_0+0x66>
		default: break;
 8000e18:	bf00      	nop
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40010800 	.word	0x40010800

08000e28 <displayLED_1>:

void displayLED_1(int status) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, OFF);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2110      	movs	r1, #16
 8000e34:	4818      	ldr	r0, [pc, #96]	; (8000e98 <displayLED_1+0x70>)
 8000e36:	f001 f8de 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, OFF);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	4816      	ldr	r0, [pc, #88]	; (8000e98 <displayLED_1+0x70>)
 8000e40:	f001 f8d9 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, OFF);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	4813      	ldr	r0, [pc, #76]	; (8000e98 <displayLED_1+0x70>)
 8000e4a:	f001 f8d4 	bl	8001ff6 <HAL_GPIO_WritePin>

	switch (status) {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d015      	beq.n	8000e80 <displayLED_1+0x58>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	dc18      	bgt.n	8000e8c <displayLED_1+0x64>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <displayLED_1+0x40>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d006      	beq.n	8000e74 <displayLED_1+0x4c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, ON); break;
		case AMBER:
			HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, ON); break;
		case GREEN:
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, ON); break;
		default: break;
 8000e66:	e011      	b.n	8000e8c <displayLED_1+0x64>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, ON); break;
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	480a      	ldr	r0, [pc, #40]	; (8000e98 <displayLED_1+0x70>)
 8000e6e:	f001 f8c2 	bl	8001ff6 <HAL_GPIO_WritePin>
 8000e72:	e00c      	b.n	8000e8e <displayLED_1+0x66>
			HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, ON); break;
 8000e74:	2200      	movs	r2, #0
 8000e76:	2120      	movs	r1, #32
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <displayLED_1+0x70>)
 8000e7a:	f001 f8bc 	bl	8001ff6 <HAL_GPIO_WritePin>
 8000e7e:	e006      	b.n	8000e8e <displayLED_1+0x66>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, ON); break;
 8000e80:	2200      	movs	r2, #0
 8000e82:	2140      	movs	r1, #64	; 0x40
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <displayLED_1+0x70>)
 8000e86:	f001 f8b6 	bl	8001ff6 <HAL_GPIO_WritePin>
 8000e8a:	e000      	b.n	8000e8e <displayLED_1+0x66>
		default: break;
 8000e8c:	bf00      	nop
	}
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40010800 	.word	0x40010800

08000e9c <defaultState>:

void defaultState(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	mode = AUTOMATIC;
 8000ea0:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <defaultState+0xdc>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]

	// RESET: EN0-3
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, OFF);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2110      	movs	r1, #16
 8000eaa:	4834      	ldr	r0, [pc, #208]	; (8000f7c <defaultState+0xe0>)
 8000eac:	f001 f8a3 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, OFF);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2120      	movs	r1, #32
 8000eb4:	4831      	ldr	r0, [pc, #196]	; (8000f7c <defaultState+0xe0>)
 8000eb6:	f001 f89e 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, OFF);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2140      	movs	r1, #64	; 0x40
 8000ebe:	482f      	ldr	r0, [pc, #188]	; (8000f7c <defaultState+0xe0>)
 8000ec0:	f001 f899 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, OFF);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	482c      	ldr	r0, [pc, #176]	; (8000f7c <defaultState+0xe0>)
 8000eca:	f001 f894 	bl	8001ff6 <HAL_GPIO_WritePin>

	// RESET: All attrs of led0
	led0_status = GREEN;
 8000ece:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <defaultState+0xe4>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	701a      	strb	r2, [r3, #0]
	red_counter_0 = DEFAULT_RED_COUNTER;
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <defaultState+0xe8>)
 8000ed6:	2205      	movs	r2, #5
 8000ed8:	601a      	str	r2, [r3, #0]
	amber_counter_0 = DEFAULT_AMBER_COUNTER;
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <defaultState+0xec>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	601a      	str	r2, [r3, #0]
	green_counter_0 = DEFAULT_GREEN_COUNTER;
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <defaultState+0xf0>)
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, OFF);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4829      	ldr	r0, [pc, #164]	; (8000f90 <defaultState+0xf4>)
 8000eec:	f001 f883 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_0_GPIO_Port, LED_AMBER_0_Pin, OFF);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	4826      	ldr	r0, [pc, #152]	; (8000f90 <defaultState+0xf4>)
 8000ef6:	f001 f87e 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, ON);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2108      	movs	r1, #8
 8000efe:	4824      	ldr	r0, [pc, #144]	; (8000f90 <defaultState+0xf4>)
 8000f00:	f001 f879 	bl	8001ff6 <HAL_GPIO_WritePin>
	updateLedBuffer_0(green_counter_0);
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <defaultState+0xf0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff f91f 	bl	800014c <updateLedBuffer_0>

	// RESET: All attrs of led1
	led1_status = RED;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <defaultState+0xf8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
	red_counter_1 = DEFAULT_RED_COUNTER;
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <defaultState+0xfc>)
 8000f16:	2205      	movs	r2, #5
 8000f18:	601a      	str	r2, [r3, #0]
	amber_counter_1 = DEFAULT_AMBER_COUNTER;
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <defaultState+0x100>)
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	601a      	str	r2, [r3, #0]
	green_counter_1 = DEFAULT_GREEN_COUNTER;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <defaultState+0x104>)
 8000f22:	2203      	movs	r2, #3
 8000f24:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, ON);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2110      	movs	r1, #16
 8000f2a:	4819      	ldr	r0, [pc, #100]	; (8000f90 <defaultState+0xf4>)
 8000f2c:	f001 f863 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, OFF);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2120      	movs	r1, #32
 8000f34:	4816      	ldr	r0, [pc, #88]	; (8000f90 <defaultState+0xf4>)
 8000f36:	f001 f85e 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, OFF);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2140      	movs	r1, #64	; 0x40
 8000f3e:	4814      	ldr	r0, [pc, #80]	; (8000f90 <defaultState+0xf4>)
 8000f40:	f001 f859 	bl	8001ff6 <HAL_GPIO_WritePin>
	updateLedBuffer_1(red_counter_1);
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <defaultState+0xfc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff f923 	bl	8000194 <updateLedBuffer_1>

	// Reset counter_buffer
	red_counter_buffer_temp = DEFAULT_RED_COUNTER;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <defaultState+0x108>)
 8000f50:	2205      	movs	r2, #5
 8000f52:	601a      	str	r2, [r3, #0]
	amber_counter_buffer_temp = DEFAULT_AMBER_COUNTER;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <defaultState+0x10c>)
 8000f56:	2202      	movs	r2, #2
 8000f58:	601a      	str	r2, [r3, #0]
	green_counter_buffer_temp = DEFAULT_GREEN_COUNTER;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <defaultState+0x110>)
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	601a      	str	r2, [r3, #0]
	red_counter_buffer = DEFAULT_RED_COUNTER;
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <defaultState+0x114>)
 8000f62:	2205      	movs	r2, #5
 8000f64:	601a      	str	r2, [r3, #0]
	amber_counter_buffer = DEFAULT_AMBER_COUNTER;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <defaultState+0x118>)
 8000f68:	2202      	movs	r2, #2
 8000f6a:	601a      	str	r2, [r3, #0]
	green_counter_buffer = DEFAULT_GREEN_COUNTER;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <defaultState+0x11c>)
 8000f6e:	2203      	movs	r2, #3
 8000f70:	601a      	str	r2, [r3, #0]
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000019c 	.word	0x2000019c
 8000f7c:	40010c00 	.word	0x40010c00
 8000f80:	20000134 	.word	0x20000134
 8000f84:	20000138 	.word	0x20000138
 8000f88:	2000013c 	.word	0x2000013c
 8000f8c:	20000140 	.word	0x20000140
 8000f90:	40010800 	.word	0x40010800
 8000f94:	200001bc 	.word	0x200001bc
 8000f98:	20000144 	.word	0x20000144
 8000f9c:	20000148 	.word	0x20000148
 8000fa0:	2000014c 	.word	0x2000014c
 8000fa4:	20000010 	.word	0x20000010
 8000fa8:	20000014 	.word	0x20000014
 8000fac:	20000018 	.word	0x20000018
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	2000000c 	.word	0x2000000c

08000fbc <resetState>:

void resetState(void) { // Just in normal mode
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	mode = AUTOMATIC;
 8000fc0:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <resetState+0xc4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]

	// RESET: EN0-3
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, OFF);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2110      	movs	r1, #16
 8000fca:	482e      	ldr	r0, [pc, #184]	; (8001084 <resetState+0xc8>)
 8000fcc:	f001 f813 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, OFF);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	482b      	ldr	r0, [pc, #172]	; (8001084 <resetState+0xc8>)
 8000fd6:	f001 f80e 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, OFF);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2140      	movs	r1, #64	; 0x40
 8000fde:	4829      	ldr	r0, [pc, #164]	; (8001084 <resetState+0xc8>)
 8000fe0:	f001 f809 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, OFF);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2180      	movs	r1, #128	; 0x80
 8000fe8:	4826      	ldr	r0, [pc, #152]	; (8001084 <resetState+0xc8>)
 8000fea:	f001 f804 	bl	8001ff6 <HAL_GPIO_WritePin>

	// RESET: All attrs of led0
	led0_status = GREEN;
 8000fee:	4b26      	ldr	r3, [pc, #152]	; (8001088 <resetState+0xcc>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	701a      	strb	r2, [r3, #0]
	red_counter_0 = red_counter_buffer;
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <resetState+0xd0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a25      	ldr	r2, [pc, #148]	; (8001090 <resetState+0xd4>)
 8000ffa:	6013      	str	r3, [r2, #0]
	amber_counter_0 = amber_counter_buffer;
 8000ffc:	4b25      	ldr	r3, [pc, #148]	; (8001094 <resetState+0xd8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a25      	ldr	r2, [pc, #148]	; (8001098 <resetState+0xdc>)
 8001002:	6013      	str	r3, [r2, #0]
	green_counter_0 = green_counter_buffer;
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <resetState+0xe0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a25      	ldr	r2, [pc, #148]	; (80010a0 <resetState+0xe4>)
 800100a:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, OFF);
 800100c:	2201      	movs	r2, #1
 800100e:	2102      	movs	r1, #2
 8001010:	4824      	ldr	r0, [pc, #144]	; (80010a4 <resetState+0xe8>)
 8001012:	f000 fff0 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_0_GPIO_Port, LED_AMBER_0_Pin, OFF);
 8001016:	2201      	movs	r2, #1
 8001018:	2104      	movs	r1, #4
 800101a:	4822      	ldr	r0, [pc, #136]	; (80010a4 <resetState+0xe8>)
 800101c:	f000 ffeb 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, ON);
 8001020:	2200      	movs	r2, #0
 8001022:	2108      	movs	r1, #8
 8001024:	481f      	ldr	r0, [pc, #124]	; (80010a4 <resetState+0xe8>)
 8001026:	f000 ffe6 	bl	8001ff6 <HAL_GPIO_WritePin>
	updateLedBuffer_0(green_counter_0);
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <resetState+0xe4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f88c 	bl	800014c <updateLedBuffer_0>

	// RESET: All attrs of led1
	led1_status = RED;
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <resetState+0xec>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
	red_counter_1 = red_counter_buffer;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <resetState+0xd0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <resetState+0xf0>)
 8001040:	6013      	str	r3, [r2, #0]
	amber_counter_1 = amber_counter_buffer;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <resetState+0xd8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a1a      	ldr	r2, [pc, #104]	; (80010b0 <resetState+0xf4>)
 8001048:	6013      	str	r3, [r2, #0]
	green_counter_1 = green_counter_buffer;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <resetState+0xe0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a19      	ldr	r2, [pc, #100]	; (80010b4 <resetState+0xf8>)
 8001050:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, ON);
 8001052:	2200      	movs	r2, #0
 8001054:	2110      	movs	r1, #16
 8001056:	4813      	ldr	r0, [pc, #76]	; (80010a4 <resetState+0xe8>)
 8001058:	f000 ffcd 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, OFF);
 800105c:	2201      	movs	r2, #1
 800105e:	2120      	movs	r1, #32
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <resetState+0xe8>)
 8001062:	f000 ffc8 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, OFF);
 8001066:	2201      	movs	r2, #1
 8001068:	2140      	movs	r1, #64	; 0x40
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <resetState+0xe8>)
 800106c:	f000 ffc3 	bl	8001ff6 <HAL_GPIO_WritePin>
	updateLedBuffer_1(red_counter_1);
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <resetState+0xf0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff f88d 	bl	8000194 <updateLedBuffer_1>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000019c 	.word	0x2000019c
 8001084:	40010c00 	.word	0x40010c00
 8001088:	20000134 	.word	0x20000134
 800108c:	20000004 	.word	0x20000004
 8001090:	20000138 	.word	0x20000138
 8001094:	20000008 	.word	0x20000008
 8001098:	2000013c 	.word	0x2000013c
 800109c:	2000000c 	.word	0x2000000c
 80010a0:	20000140 	.word	0x20000140
 80010a4:	40010800 	.word	0x40010800
 80010a8:	200001bc 	.word	0x200001bc
 80010ac:	20000144 	.word	0x20000144
 80010b0:	20000148 	.word	0x20000148
 80010b4:	2000014c 	.word	0x2000014c

080010b8 <displayTrafficIdle>:

void displayTrafficIdle(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	switch (led0_status) {
 80010bc:	4b77      	ldr	r3, [pc, #476]	; (800129c <displayTrafficIdle+0x1e4>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d04a      	beq.n	800115a <displayTrafficIdle+0xa2>
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	dc6a      	bgt.n	800119e <displayTrafficIdle+0xe6>
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <displayTrafficIdle+0x1a>
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d022      	beq.n	8001116 <displayTrafficIdle+0x5e>
			} else {
				updateLedBuffer_0(--green_counter_0);
			}

			break;
		default: break;
 80010d0:	e065      	b.n	800119e <displayTrafficIdle+0xe6>
			if (red_counter_0 <= 0) {
 80010d2:	4b73      	ldr	r3, [pc, #460]	; (80012a0 <displayTrafficIdle+0x1e8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dc12      	bgt.n	8001100 <displayTrafficIdle+0x48>
				red_counter_0 = get_red_counter_buffer(); // Reset for next red state
 80010da:	f7ff f87f 	bl	80001dc <get_red_counter_buffer>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a6f      	ldr	r2, [pc, #444]	; (80012a0 <displayTrafficIdle+0x1e8>)
 80010e2:	6013      	str	r3, [r2, #0]
				led0_status = GREEN;
 80010e4:	4b6d      	ldr	r3, [pc, #436]	; (800129c <displayTrafficIdle+0x1e4>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	701a      	strb	r2, [r3, #0]
				updateLedBuffer_0(--green_counter_0);
 80010ea:	4b6e      	ldr	r3, [pc, #440]	; (80012a4 <displayTrafficIdle+0x1ec>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	4a6c      	ldr	r2, [pc, #432]	; (80012a4 <displayTrafficIdle+0x1ec>)
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b6b      	ldr	r3, [pc, #428]	; (80012a4 <displayTrafficIdle+0x1ec>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f827 	bl	800014c <updateLedBuffer_0>
			break;
 80010fe:	e04f      	b.n	80011a0 <displayTrafficIdle+0xe8>
				updateLedBuffer_0(--red_counter_0);
 8001100:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <displayTrafficIdle+0x1e8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3b01      	subs	r3, #1
 8001106:	4a66      	ldr	r2, [pc, #408]	; (80012a0 <displayTrafficIdle+0x1e8>)
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b65      	ldr	r3, [pc, #404]	; (80012a0 <displayTrafficIdle+0x1e8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f81c 	bl	800014c <updateLedBuffer_0>
			break;
 8001114:	e044      	b.n	80011a0 <displayTrafficIdle+0xe8>
			if (amber_counter_0 <= 0) {
 8001116:	4b64      	ldr	r3, [pc, #400]	; (80012a8 <displayTrafficIdle+0x1f0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	dc12      	bgt.n	8001144 <displayTrafficIdle+0x8c>
				amber_counter_0 = get_amber_counter_buffer();
 800111e:	f7ff f867 	bl	80001f0 <get_amber_counter_buffer>
 8001122:	4603      	mov	r3, r0
 8001124:	4a60      	ldr	r2, [pc, #384]	; (80012a8 <displayTrafficIdle+0x1f0>)
 8001126:	6013      	str	r3, [r2, #0]
				led0_status = RED;
 8001128:	4b5c      	ldr	r3, [pc, #368]	; (800129c <displayTrafficIdle+0x1e4>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
				updateLedBuffer_0(--red_counter_0);
 800112e:	4b5c      	ldr	r3, [pc, #368]	; (80012a0 <displayTrafficIdle+0x1e8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3b01      	subs	r3, #1
 8001134:	4a5a      	ldr	r2, [pc, #360]	; (80012a0 <displayTrafficIdle+0x1e8>)
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <displayTrafficIdle+0x1e8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f805 	bl	800014c <updateLedBuffer_0>
			break;
 8001142:	e02d      	b.n	80011a0 <displayTrafficIdle+0xe8>
				updateLedBuffer_0(--amber_counter_0);
 8001144:	4b58      	ldr	r3, [pc, #352]	; (80012a8 <displayTrafficIdle+0x1f0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	4a57      	ldr	r2, [pc, #348]	; (80012a8 <displayTrafficIdle+0x1f0>)
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <displayTrafficIdle+0x1f0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7fe fffa 	bl	800014c <updateLedBuffer_0>
			break;
 8001158:	e022      	b.n	80011a0 <displayTrafficIdle+0xe8>
			if (green_counter_0 <= 0) {
 800115a:	4b52      	ldr	r3, [pc, #328]	; (80012a4 <displayTrafficIdle+0x1ec>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	dc12      	bgt.n	8001188 <displayTrafficIdle+0xd0>
				green_counter_0 = get_green_counter_buffer();
 8001162:	f7ff f84f 	bl	8000204 <get_green_counter_buffer>
 8001166:	4603      	mov	r3, r0
 8001168:	4a4e      	ldr	r2, [pc, #312]	; (80012a4 <displayTrafficIdle+0x1ec>)
 800116a:	6013      	str	r3, [r2, #0]
				led0_status = AMBER;
 800116c:	4b4b      	ldr	r3, [pc, #300]	; (800129c <displayTrafficIdle+0x1e4>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
				updateLedBuffer_0(--amber_counter_0);
 8001172:	4b4d      	ldr	r3, [pc, #308]	; (80012a8 <displayTrafficIdle+0x1f0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	3b01      	subs	r3, #1
 8001178:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <displayTrafficIdle+0x1f0>)
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b4a      	ldr	r3, [pc, #296]	; (80012a8 <displayTrafficIdle+0x1f0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7fe ffe3 	bl	800014c <updateLedBuffer_0>
			break;
 8001186:	e00b      	b.n	80011a0 <displayTrafficIdle+0xe8>
				updateLedBuffer_0(--green_counter_0);
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <displayTrafficIdle+0x1ec>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	4a45      	ldr	r2, [pc, #276]	; (80012a4 <displayTrafficIdle+0x1ec>)
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b44      	ldr	r3, [pc, #272]	; (80012a4 <displayTrafficIdle+0x1ec>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7fe ffd8 	bl	800014c <updateLedBuffer_0>
			break;
 800119c:	e000      	b.n	80011a0 <displayTrafficIdle+0xe8>
		default: break;
 800119e:	bf00      	nop
	}

	switch (led1_status) {
 80011a0:	4b42      	ldr	r3, [pc, #264]	; (80012ac <displayTrafficIdle+0x1f4>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d04a      	beq.n	800123e <displayTrafficIdle+0x186>
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	dc6a      	bgt.n	8001282 <displayTrafficIdle+0x1ca>
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <displayTrafficIdle+0xfe>
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d022      	beq.n	80011fa <displayTrafficIdle+0x142>
			} else {
				updateLedBuffer_1(--green_counter_1);
			}

			break;
		default: break;
 80011b4:	e065      	b.n	8001282 <displayTrafficIdle+0x1ca>
			if (red_counter_1 <= 0) {
 80011b6:	4b3e      	ldr	r3, [pc, #248]	; (80012b0 <displayTrafficIdle+0x1f8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	dc12      	bgt.n	80011e4 <displayTrafficIdle+0x12c>
				red_counter_1 = get_red_counter_buffer();
 80011be:	f7ff f80d 	bl	80001dc <get_red_counter_buffer>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a3a      	ldr	r2, [pc, #232]	; (80012b0 <displayTrafficIdle+0x1f8>)
 80011c6:	6013      	str	r3, [r2, #0]
				led1_status = GREEN;
 80011c8:	4b38      	ldr	r3, [pc, #224]	; (80012ac <displayTrafficIdle+0x1f4>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	701a      	strb	r2, [r3, #0]
				updateLedBuffer_1(--green_counter_1);
 80011ce:	4b39      	ldr	r3, [pc, #228]	; (80012b4 <displayTrafficIdle+0x1fc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	4a37      	ldr	r2, [pc, #220]	; (80012b4 <displayTrafficIdle+0x1fc>)
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b36      	ldr	r3, [pc, #216]	; (80012b4 <displayTrafficIdle+0x1fc>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7fe ffd9 	bl	8000194 <updateLedBuffer_1>
			break;
 80011e2:	e04f      	b.n	8001284 <displayTrafficIdle+0x1cc>
				updateLedBuffer_1(--red_counter_1);
 80011e4:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <displayTrafficIdle+0x1f8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	4a31      	ldr	r2, [pc, #196]	; (80012b0 <displayTrafficIdle+0x1f8>)
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <displayTrafficIdle+0x1f8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7fe ffce 	bl	8000194 <updateLedBuffer_1>
			break;
 80011f8:	e044      	b.n	8001284 <displayTrafficIdle+0x1cc>
			if (amber_counter_1 <= 0) {
 80011fa:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <displayTrafficIdle+0x200>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dc12      	bgt.n	8001228 <displayTrafficIdle+0x170>
				amber_counter_1 = get_amber_counter_buffer();
 8001202:	f7fe fff5 	bl	80001f0 <get_amber_counter_buffer>
 8001206:	4603      	mov	r3, r0
 8001208:	4a2b      	ldr	r2, [pc, #172]	; (80012b8 <displayTrafficIdle+0x200>)
 800120a:	6013      	str	r3, [r2, #0]
				led1_status = RED;
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <displayTrafficIdle+0x1f4>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
				updateLedBuffer_1(--red_counter_1);
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <displayTrafficIdle+0x1f8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3b01      	subs	r3, #1
 8001218:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <displayTrafficIdle+0x1f8>)
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <displayTrafficIdle+0x1f8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7fe ffb7 	bl	8000194 <updateLedBuffer_1>
			break;
 8001226:	e02d      	b.n	8001284 <displayTrafficIdle+0x1cc>
				updateLedBuffer_1(--amber_counter_1);
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <displayTrafficIdle+0x200>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	3b01      	subs	r3, #1
 800122e:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <displayTrafficIdle+0x200>)
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <displayTrafficIdle+0x200>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7fe ffac 	bl	8000194 <updateLedBuffer_1>
			break;
 800123c:	e022      	b.n	8001284 <displayTrafficIdle+0x1cc>
			if (green_counter_1 <= 0) {
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <displayTrafficIdle+0x1fc>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	dc12      	bgt.n	800126c <displayTrafficIdle+0x1b4>
				green_counter_1 = get_green_counter_buffer();
 8001246:	f7fe ffdd 	bl	8000204 <get_green_counter_buffer>
 800124a:	4603      	mov	r3, r0
 800124c:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <displayTrafficIdle+0x1fc>)
 800124e:	6013      	str	r3, [r2, #0]
				led1_status = AMBER;
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <displayTrafficIdle+0x1f4>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
				updateLedBuffer_1(--amber_counter_1);
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <displayTrafficIdle+0x200>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3b01      	subs	r3, #1
 800125c:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <displayTrafficIdle+0x200>)
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <displayTrafficIdle+0x200>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7fe ff95 	bl	8000194 <updateLedBuffer_1>
			break;
 800126a:	e00b      	b.n	8001284 <displayTrafficIdle+0x1cc>
				updateLedBuffer_1(--green_counter_1);
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <displayTrafficIdle+0x1fc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3b01      	subs	r3, #1
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <displayTrafficIdle+0x1fc>)
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <displayTrafficIdle+0x1fc>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7fe ff8a 	bl	8000194 <updateLedBuffer_1>
			break;
 8001280:	e000      	b.n	8001284 <displayTrafficIdle+0x1cc>
		default: break;
 8001282:	bf00      	nop
	}

	// Display LEDs
	displayLED_0(led0_status);
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <displayTrafficIdle+0x1e4>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fd93 	bl	8000db4 <displayLED_0>
	displayLED_1(led1_status);
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <displayTrafficIdle+0x1f4>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fdc8 	bl	8000e28 <displayLED_1>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000134 	.word	0x20000134
 80012a0:	20000138 	.word	0x20000138
 80012a4:	20000140 	.word	0x20000140
 80012a8:	2000013c 	.word	0x2000013c
 80012ac:	200001bc 	.word	0x200001bc
 80012b0:	20000144 	.word	0x20000144
 80012b4:	2000014c 	.word	0x2000014c
 80012b8:	20000148 	.word	0x20000148

080012bc <blinkLED>:

void blinkLED(int mode) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	switch (mode) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d01b      	beq.n	8001302 <blinkLED+0x46>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	dc21      	bgt.n	8001314 <blinkLED+0x58>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d003      	beq.n	80012de <blinkLED+0x22>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d009      	beq.n	80012f0 <blinkLED+0x34>
			break;
		case MODIFY_GREEN:
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
			HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
			break;
		default: break;
 80012dc:	e01a      	b.n	8001314 <blinkLED+0x58>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 80012de:	2102      	movs	r1, #2
 80012e0:	480f      	ldr	r0, [pc, #60]	; (8001320 <blinkLED+0x64>)
 80012e2:	f000 fea0 	bl	8002026 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 80012e6:	2110      	movs	r1, #16
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <blinkLED+0x64>)
 80012ea:	f000 fe9c 	bl	8002026 <HAL_GPIO_TogglePin>
			break;
 80012ee:	e012      	b.n	8001316 <blinkLED+0x5a>
			HAL_GPIO_TogglePin(LED_AMBER_0_GPIO_Port, LED_AMBER_0_Pin);
 80012f0:	2104      	movs	r1, #4
 80012f2:	480b      	ldr	r0, [pc, #44]	; (8001320 <blinkLED+0x64>)
 80012f4:	f000 fe97 	bl	8002026 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin);
 80012f8:	2120      	movs	r1, #32
 80012fa:	4809      	ldr	r0, [pc, #36]	; (8001320 <blinkLED+0x64>)
 80012fc:	f000 fe93 	bl	8002026 <HAL_GPIO_TogglePin>
			break;
 8001300:	e009      	b.n	8001316 <blinkLED+0x5a>
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
 8001302:	2108      	movs	r1, #8
 8001304:	4806      	ldr	r0, [pc, #24]	; (8001320 <blinkLED+0x64>)
 8001306:	f000 fe8e 	bl	8002026 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 800130a:	2140      	movs	r1, #64	; 0x40
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <blinkLED+0x64>)
 800130e:	f000 fe8a 	bl	8002026 <HAL_GPIO_TogglePin>
			break;
 8001312:	e000      	b.n	8001316 <blinkLED+0x5a>
		default: break;
 8001314:	bf00      	nop
	}
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40010800 	.word	0x40010800

08001324 <fsm_for_output_processing>:

void fsm_for_output_processing(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	switch (mode) {
 8001328:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <fsm_for_output_processing+0xfc>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b04      	cmp	r3, #4
 800132e:	dc4f      	bgt.n	80013d0 <fsm_for_output_processing+0xac>
 8001330:	2b02      	cmp	r3, #2
 8001332:	da3e      	bge.n	80013b2 <fsm_for_output_processing+0x8e>
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <fsm_for_output_processing+0x1a>
 8001338:	2b01      	cmp	r3, #1
 800133a:	d00c      	beq.n	8001356 <fsm_for_output_processing+0x32>
			if (checkTimerFlag(tmr_blink_mod_led)) {
				resetTimer(tmr_blink_mod_led);
				blinkLED(mode);
			}
			break;
		default: break;
 800133c:	e048      	b.n	80013d0 <fsm_for_output_processing+0xac>
			if (checkTimerFlag(tmr_traffic_clk)) {
 800133e:	2000      	movs	r0, #0
 8001340:	f000 faba 	bl	80018b8 <checkTimerFlag>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d044      	beq.n	80013d4 <fsm_for_output_processing+0xb0>
				resetTimer(tmr_traffic_clk);
 800134a:	2000      	movs	r0, #0
 800134c:	f000 fa8a 	bl	8001864 <resetTimer>
				displayTrafficIdle();
 8001350:	f7ff feb2 	bl	80010b8 <displayTrafficIdle>
			break;
 8001354:	e03e      	b.n	80013d4 <fsm_for_output_processing+0xb0>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, OFF);
 8001356:	2201      	movs	r2, #1
 8001358:	2110      	movs	r1, #16
 800135a:	4832      	ldr	r0, [pc, #200]	; (8001424 <fsm_for_output_processing+0x100>)
 800135c:	f000 fe4b 	bl	8001ff6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, OFF);
 8001360:	2201      	movs	r2, #1
 8001362:	2120      	movs	r1, #32
 8001364:	482f      	ldr	r0, [pc, #188]	; (8001424 <fsm_for_output_processing+0x100>)
 8001366:	f000 fe46 	bl	8001ff6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, OFF);
 800136a:	2201      	movs	r2, #1
 800136c:	2140      	movs	r1, #64	; 0x40
 800136e:	482d      	ldr	r0, [pc, #180]	; (8001424 <fsm_for_output_processing+0x100>)
 8001370:	f000 fe41 	bl	8001ff6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, OFF);
 8001374:	2201      	movs	r2, #1
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	482a      	ldr	r0, [pc, #168]	; (8001424 <fsm_for_output_processing+0x100>)
 800137a:	f000 fe3c 	bl	8001ff6 <HAL_GPIO_WritePin>
			if (free_dir == 0) { // Use free_dir to allow extend project to traffic lights more than 2 directions
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <fsm_for_output_processing+0x104>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10a      	bne.n	800139c <fsm_for_output_processing+0x78>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2108      	movs	r1, #8
 800138a:	4828      	ldr	r0, [pc, #160]	; (800142c <fsm_for_output_processing+0x108>)
 800138c:	f000 fe33 	bl	8001ff6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2110      	movs	r1, #16
 8001394:	4825      	ldr	r0, [pc, #148]	; (800142c <fsm_for_output_processing+0x108>)
 8001396:	f000 fe2e 	bl	8001ff6 <HAL_GPIO_WritePin>
			break;
 800139a:	e01e      	b.n	80013da <fsm_for_output_processing+0xb6>
				HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2140      	movs	r1, #64	; 0x40
 80013a0:	4822      	ldr	r0, [pc, #136]	; (800142c <fsm_for_output_processing+0x108>)
 80013a2:	f000 fe28 	bl	8001ff6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2102      	movs	r1, #2
 80013aa:	4820      	ldr	r0, [pc, #128]	; (800142c <fsm_for_output_processing+0x108>)
 80013ac:	f000 fe23 	bl	8001ff6 <HAL_GPIO_WritePin>
			break;
 80013b0:	e013      	b.n	80013da <fsm_for_output_processing+0xb6>
			if (checkTimerFlag(tmr_blink_mod_led)) {
 80013b2:	2004      	movs	r0, #4
 80013b4:	f000 fa80 	bl	80018b8 <checkTimerFlag>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00c      	beq.n	80013d8 <fsm_for_output_processing+0xb4>
				resetTimer(tmr_blink_mod_led);
 80013be:	2004      	movs	r0, #4
 80013c0:	f000 fa50 	bl	8001864 <resetTimer>
				blinkLED(mode);
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <fsm_for_output_processing+0xfc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff77 	bl	80012bc <blinkLED>
			break;
 80013ce:	e003      	b.n	80013d8 <fsm_for_output_processing+0xb4>
		default: break;
 80013d0:	bf00      	nop
 80013d2:	e002      	b.n	80013da <fsm_for_output_processing+0xb6>
			break;
 80013d4:	bf00      	nop
 80013d6:	e000      	b.n	80013da <fsm_for_output_processing+0xb6>
			break;
 80013d8:	bf00      	nop
	}

	// Display 7SEG_LEDs
	if (checkTimerFlag(tmr_seg_scan) && mode != MANUAL) {
 80013da:	2003      	movs	r0, #3
 80013dc:	f000 fa6c 	bl	80018b8 <checkTimerFlag>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d01a      	beq.n	800141c <fsm_for_output_processing+0xf8>
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <fsm_for_output_processing+0xfc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d016      	beq.n	800141c <fsm_for_output_processing+0xf8>
		resetTimer(tmr_seg_scan);
 80013ee:	2003      	movs	r0, #3
 80013f0:	f000 fa38 	bl	8001864 <resetTimer>
		update7SEG_0(led_index);
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <fsm_for_output_processing+0x10c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fc57 	bl	8000cac <update7SEG_0>
		update7SEG_1(led_index);
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <fsm_for_output_processing+0x10c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fc82 	bl	8000d0c <update7SEG_1>
		led_index = (led_index + 1) % N0_OF_SEG_PER_DIR; // Ensure led_index < N0_SEG_PER_DIR
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <fsm_for_output_processing+0x10c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	bfb8      	it	lt
 8001416:	425b      	neglt	r3, r3
 8001418:	4a05      	ldr	r2, [pc, #20]	; (8001430 <fsm_for_output_processing+0x10c>)
 800141a:	6013      	str	r3, [r2, #0]
	}
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2000019c 	.word	0x2000019c
 8001424:	40010c00 	.word	0x40010c00
 8001428:	200001a0 	.word	0x200001a0
 800142c:	40010800 	.word	0x40010800
 8001430:	200001c0 	.word	0x200001c0

08001434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001438:	f000 fadc 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143c:	f000 f848 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001440:	f000 f8ce 	bl	80015e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001444:	f000 f880 	bl	8001548 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001448:	481e      	ldr	r0, [pc, #120]	; (80014c4 <main+0x90>)
 800144a:	f001 fa31 	bl	80028b0 <HAL_TIM_Base_Start_IT>

  defaultState();
 800144e:	f7ff fd25 	bl	8000e9c <defaultState>
  updateTimerCycle(htim2.Init.Prescaler, htim2.Init.Period, 8000000);
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <main+0x90>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <main+0x90>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4a1a      	ldr	r2, [pc, #104]	; (80014c8 <main+0x94>)
 800145e:	4619      	mov	r1, r3
 8001460:	f000 f9c2 	bl	80017e8 <updateTimerCycle>
  setTimer(tmr_blink_mod_led, 500);
 8001464:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001468:	2004      	movs	r0, #4
 800146a:	f000 f9d9 	bl	8001820 <setTimer>
  setTimer(tmr_blink_red_led, 1000);
 800146e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001472:	2005      	movs	r0, #5
 8001474:	f000 f9d4 	bl	8001820 <setTimer>
  setTimer(tmr_btn_hold, 500);
 8001478:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800147c:	2002      	movs	r0, #2
 800147e:	f000 f9cf 	bl	8001820 <setTimer>
  setTimer(tmr_btn_press, 300);
 8001482:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001486:	2001      	movs	r0, #1
 8001488:	f000 f9ca 	bl	8001820 <setTimer>
  setTimer(tmr_seg_scan, 250);
 800148c:	21fa      	movs	r1, #250	; 0xfa
 800148e:	2003      	movs	r0, #3
 8001490:	f000 f9c6 	bl	8001820 <setTimer>
  setTimer(tmr_traffic_clk, 1000);
 8001494:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001498:	2000      	movs	r0, #0
 800149a:	f000 f9c1 	bl	8001820 <setTimer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (checkTimerFlag(tmr_blink_red_led)) { // Blinking DEBUG_LED every 1000 ms
 800149e:	2005      	movs	r0, #5
 80014a0:	f000 fa0a 	bl	80018b8 <checkTimerFlag>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <main+0x84>
		  resetTimer(tmr_blink_red_led);
 80014aa:	2005      	movs	r0, #5
 80014ac:	f000 f9da 	bl	8001864 <resetTimer>
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80014b0:	2101      	movs	r1, #1
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <main+0x98>)
 80014b4:	f000 fdb7 	bl	8002026 <HAL_GPIO_TogglePin>
		}

		fsm_for_input_processing();
 80014b8:	f7fe ff18 	bl	80002ec <fsm_for_input_processing>
		fsm_for_output_processing();
 80014bc:	f7ff ff32 	bl	8001324 <fsm_for_output_processing>
		if (checkTimerFlag(tmr_blink_red_led)) { // Blinking DEBUG_LED every 1000 ms
 80014c0:	e7ed      	b.n	800149e <main+0x6a>
 80014c2:	bf00      	nop
 80014c4:	200001c4 	.word	0x200001c4
 80014c8:	007a1200 	.word	0x007a1200
 80014cc:	40010800 	.word	0x40010800

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b090      	sub	sp, #64	; 0x40
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	2228      	movs	r2, #40	; 0x28
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 fd96 	bl	8003010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f6:	2301      	movs	r3, #1
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014fa:	2310      	movs	r3, #16
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014fe:	2300      	movs	r3, #0
 8001500:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001502:	f107 0318 	add.w	r3, r7, #24
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fda6 	bl	8002058 <HAL_RCC_OscConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001512:	f000 f8d5 	bl	80016c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001516:	230f      	movs	r3, #15
 8001518:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f001 f812 	bl	8002558 <HAL_RCC_ClockConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800153a:	f000 f8c1 	bl	80016c0 <Error_Handler>
  }
}
 800153e:	bf00      	nop
 8001540:	3740      	adds	r7, #64	; 0x40
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <MX_TIM2_Init+0x94>)
 8001566:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_TIM2_Init+0x94>)
 800156e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001572:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_TIM2_Init+0x94>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_TIM2_Init+0x94>)
 800157c:	2209      	movs	r2, #9
 800157e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_TIM2_Init+0x94>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <MX_TIM2_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800158c:	4813      	ldr	r0, [pc, #76]	; (80015dc <MX_TIM2_Init+0x94>)
 800158e:	f001 f93f 	bl	8002810 <HAL_TIM_Base_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001598:	f000 f892 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	4619      	mov	r1, r3
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <MX_TIM2_Init+0x94>)
 80015aa:	f001 fabd 	bl	8002b28 <HAL_TIM_ConfigClockSource>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015b4:	f000 f884 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_TIM2_Init+0x94>)
 80015c6:	f001 fc95 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015d0:	f000 f876 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200001c4 	.word	0x200001c4

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <MX_GPIO_Init+0xd4>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a2e      	ldr	r2, [pc, #184]	; (80016b4 <MX_GPIO_Init+0xd4>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <MX_GPIO_Init+0xd4>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160c:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <MX_GPIO_Init+0xd4>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a28      	ldr	r2, [pc, #160]	; (80016b4 <MX_GPIO_Init+0xd4>)
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <MX_GPIO_Init+0xd4>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|LED_RED_0_Pin|LED_AMBER_0_Pin|LED_GREEN_0_Pin
 8001624:	2200      	movs	r2, #0
 8001626:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800162a:	4823      	ldr	r0, [pc, #140]	; (80016b8 <MX_GPIO_Init+0xd8>)
 800162c:	f000 fce3 	bl	8001ff6 <HAL_GPIO_WritePin>
                          |LED_RED_1_Pin|LED_AMBER_1_Pin|LED_GREEN_1_Pin|SEG_A_0_Pin
                          |SEG_B_0_Pin|SEG_C_0_Pin|SEG_D_0_Pin|SEG_E_0_Pin
                          |SEG_F_0_Pin|SEG_G_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_B_1_Pin|SEG_C_1_Pin|SEG_D_1_Pin|SEG_E_1_Pin
 8001630:	2200      	movs	r2, #0
 8001632:	f64f 61f0 	movw	r1, #65264	; 0xfef0
 8001636:	4821      	ldr	r0, [pc, #132]	; (80016bc <MX_GPIO_Init+0xdc>)
 8001638:	f000 fcdd 	bl	8001ff6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin LED_RED_0_Pin LED_AMBER_0_Pin LED_GREEN_0_Pin
                           LED_RED_1_Pin LED_AMBER_1_Pin LED_GREEN_1_Pin SEG_A_0_Pin
                           SEG_B_0_Pin SEG_C_0_Pin SEG_D_0_Pin SEG_E_0_Pin
                           SEG_F_0_Pin SEG_G_0_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|LED_RED_0_Pin|LED_AMBER_0_Pin|LED_GREEN_0_Pin
 800163c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001640:	60bb      	str	r3, [r7, #8]
                          |LED_RED_1_Pin|LED_AMBER_1_Pin|LED_GREEN_1_Pin|SEG_A_0_Pin
                          |SEG_B_0_Pin|SEG_C_0_Pin|SEG_D_0_Pin|SEG_E_0_Pin
                          |SEG_F_0_Pin|SEG_G_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2302      	movs	r3, #2
 800164c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	4619      	mov	r1, r3
 8001654:	4818      	ldr	r0, [pc, #96]	; (80016b8 <MX_GPIO_Init+0xd8>)
 8001656:	f000 fb3d 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800165a:	2307      	movs	r3, #7
 800165c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001662:	2301      	movs	r3, #1
 8001664:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	4619      	mov	r1, r3
 800166c:	4813      	ldr	r0, [pc, #76]	; (80016bc <MX_GPIO_Init+0xdc>)
 800166e:	f000 fb31 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_B_1_Pin SEG_C_1_Pin SEG_D_1_Pin SEG_E_1_Pin
                           SEG_F_1_Pin SEG_G_1_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin SEG_A_1_Pin */
  GPIO_InitStruct.Pin = SEG_B_1_Pin|SEG_C_1_Pin|SEG_D_1_Pin|SEG_E_1_Pin
 8001672:	f64f 63f0 	movw	r3, #65264	; 0xfef0
 8001676:	60bb      	str	r3, [r7, #8]
                          |SEG_F_1_Pin|SEG_G_1_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|SEG_A_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2302      	movs	r3, #2
 8001682:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	4619      	mov	r1, r3
 800168a:	480c      	ldr	r0, [pc, #48]	; (80016bc <MX_GPIO_Init+0xdc>)
 800168c:	f000 fb22 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_BUTTON_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin;
 8001690:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001694:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169a:	2301      	movs	r3, #1
 800169c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RESET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 0308 	add.w	r3, r7, #8
 80016a2:	4619      	mov	r1, r3
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_GPIO_Init+0xd8>)
 80016a6:	f000 fb15 	bl	8001cd4 <HAL_GPIO_Init>

}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010800 	.word	0x40010800
 80016bc:	40010c00 	.word	0x40010c00

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_MspInit+0x5c>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	4a14      	ldr	r2, [pc, #80]	; (8001728 <HAL_MspInit+0x5c>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6193      	str	r3, [r2, #24]
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_MspInit+0x5c>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_MspInit+0x5c>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_MspInit+0x5c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	61d3      	str	r3, [r2, #28]
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_MspInit+0x5c>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_MspInit+0x60>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_MspInit+0x60>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000
 800172c:	40010000 	.word	0x40010000

08001730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001740:	d113      	bne.n	800176a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_TIM_Base_MspInit+0x44>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <HAL_TIM_Base_MspInit+0x44>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	61d3      	str	r3, [r2, #28]
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_TIM_Base_MspInit+0x44>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	201c      	movs	r0, #28
 8001760:	f000 fa81 	bl	8001c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001764:	201c      	movs	r0, #28
 8001766:	f000 fa9a 	bl	8001c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800177c:	e7fe      	b.n	800177c <NMI_Handler+0x4>

0800177e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <HardFault_Handler+0x4>

08001784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <MemManage_Handler+0x4>

0800178a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <BusFault_Handler+0x4>

08001790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <UsageFault_Handler+0x4>

08001796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017be:	f000 f95f 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <TIM2_IRQHandler+0x10>)
 80017ce:	f001 f8bb 	bl	8002948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200001c4 	.word	0x200001c4

080017dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <updateTimerCycle>:
} TIMER_t;

TIMER_t timerList[N0_OF_TIMERS];
int TIMER_CYCLE = 10;

void updateTimerCycle(int prescaler, int period, int clk) {
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
	TIMER_CYCLE = ((prescaler + 1) * (period + 1) * 1000) / clk;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3301      	adds	r3, #1
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	3201      	adds	r2, #1
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
 8001800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001804:	fb02 f203 	mul.w	r2, r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	fb92 f3f3 	sdiv	r3, r2, r3
 800180e:	4a03      	ldr	r2, [pc, #12]	; (800181c <updateTimerCycle+0x34>)
 8001810:	6013      	str	r3, [r2, #0]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	20000154 	.word	0x20000154

08001820 <setTimer>:

void setTimer(int id, int duration) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
	if (id >= N0_OF_TIMERS) return;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b05      	cmp	r3, #5
 800182e:	dc10      	bgt.n	8001852 <setTimer+0x32>

	timerList[id].base_counter = duration / TIMER_CYCLE;
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <setTimer+0x3c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	fb92 f1f3 	sdiv	r1, r2, r3
 800183a:	4809      	ldr	r0, [pc, #36]	; (8001860 <setTimer+0x40>)
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4403      	add	r3, r0
 8001848:	6019      	str	r1, [r3, #0]
	resetTimer(id);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f80a 	bl	8001864 <resetTimer>
 8001850:	e000      	b.n	8001854 <setTimer+0x34>
	if (id >= N0_OF_TIMERS) return;
 8001852:	bf00      	nop
}
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000154 	.word	0x20000154
 8001860:	2000020c 	.word	0x2000020c

08001864 <resetTimer>:

void resetTimer(int id) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	if (id >= N0_OF_TIMERS) return;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b05      	cmp	r3, #5
 8001870:	dc1b      	bgt.n	80018aa <resetTimer+0x46>

	timerList[id].counter = timerList[id].base_counter;
 8001872:	4910      	ldr	r1, [pc, #64]	; (80018b4 <resetTimer+0x50>)
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	6819      	ldr	r1, [r3, #0]
 8001882:	480c      	ldr	r0, [pc, #48]	; (80018b4 <resetTimer+0x50>)
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4403      	add	r3, r0
 8001890:	3304      	adds	r3, #4
 8001892:	6019      	str	r1, [r3, #0]
	timerList[id].flag = 0;
 8001894:	4907      	ldr	r1, [pc, #28]	; (80018b4 <resetTimer+0x50>)
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	3308      	adds	r3, #8
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e000      	b.n	80018ac <resetTimer+0x48>
	if (id >= N0_OF_TIMERS) return;
 80018aa:	bf00      	nop
}
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	2000020c 	.word	0x2000020c

080018b8 <checkTimerFlag>:

int checkTimerFlag(int id) {
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	if (id >= N0_OF_TIMERS) return 0;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	dd01      	ble.n	80018ca <checkTimerFlag+0x12>
 80018c6:	2300      	movs	r3, #0
 80018c8:	e00d      	b.n	80018e6 <checkTimerFlag+0x2e>

	return (timerList[id].flag == 1);
 80018ca:	4909      	ldr	r1, [pc, #36]	; (80018f0 <checkTimerFlag+0x38>)
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	3308      	adds	r3, #8
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	bf0c      	ite	eq
 80018e0:	2301      	moveq	r3, #1
 80018e2:	2300      	movne	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	2000020c 	.word	0x2000020c

080018f4 <timerRun>:

void timerRun() {
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_TIMERS; ++i) {
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	e035      	b.n	800196c <timerRun+0x78>
		if (timerList[i].counter > 0) {
 8001900:	491f      	ldr	r1, [pc, #124]	; (8001980 <timerRun+0x8c>)
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	3304      	adds	r3, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	dd27      	ble.n	8001966 <timerRun+0x72>
			--timerList[i].counter;
 8001916:	491a      	ldr	r1, [pc, #104]	; (8001980 <timerRun+0x8c>)
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	3304      	adds	r3, #4
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	1e59      	subs	r1, r3, #1
 800192a:	4815      	ldr	r0, [pc, #84]	; (8001980 <timerRun+0x8c>)
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4403      	add	r3, r0
 8001938:	3304      	adds	r3, #4
 800193a:	6019      	str	r1, [r3, #0]
			if (timerList[i].counter == 0) timerList[i].flag = 1;
 800193c:	4910      	ldr	r1, [pc, #64]	; (8001980 <timerRun+0x8c>)
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	3304      	adds	r3, #4
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <timerRun+0x72>
 8001952:	490b      	ldr	r1, [pc, #44]	; (8001980 <timerRun+0x8c>)
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	3308      	adds	r3, #8
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < N0_OF_TIMERS; ++i) {
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3301      	adds	r3, #1
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b05      	cmp	r3, #5
 8001970:	ddc6      	ble.n	8001900 <timerRun+0xc>
		}
	}
}
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	2000020c 	.word	0x2000020c

08001984 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001994:	d103      	bne.n	800199e <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8001996:	f7fe ffc7 	bl	8000928 <button_reading>
		timerRun();
 800199a:	f7ff ffab 	bl	80018f4 <timerRun>
	}
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a8:	f7ff ff18 	bl	80017dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ac:	480b      	ldr	r0, [pc, #44]	; (80019dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ae:	490c      	ldr	r1, [pc, #48]	; (80019e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019b0:	4a0c      	ldr	r2, [pc, #48]	; (80019e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019c4:	4c09      	ldr	r4, [pc, #36]	; (80019ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d2:	f001 faf9 	bl	8002fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019d6:	f7ff fd2d 	bl	8001434 <main>
  bx lr
 80019da:	4770      	bx	lr
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80019e4:	08003064 	.word	0x08003064
  ldr r2, =_sbss
 80019e8:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80019ec:	20000258 	.word	0x20000258

080019f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_Init+0x28>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_Init+0x28>)
 80019fe:	f043 0310 	orr.w	r3, r3, #16
 8001a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f923 	bl	8001c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f000 f808 	bl	8001a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a10:	f7ff fe5c 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40022000 	.word	0x40022000

08001a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x54>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_InitTick+0x58>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f93b 	bl	8001cba <HAL_SYSTICK_Config>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00e      	b.n	8001a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b0f      	cmp	r3, #15
 8001a52:	d80a      	bhi.n	8001a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a54:	2200      	movs	r2, #0
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f000 f903 	bl	8001c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a60:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <HAL_InitTick+0x5c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e000      	b.n	8001a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000150 	.word	0x20000150
 8001a78:	2000015c 	.word	0x2000015c
 8001a7c:	20000158 	.word	0x20000158

08001a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_IncTick+0x1c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a03      	ldr	r2, [pc, #12]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	2000015c 	.word	0x2000015c
 8001aa0:	20000254 	.word	0x20000254

08001aa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b02      	ldr	r3, [pc, #8]	; (8001ab4 <HAL_GetTick+0x10>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	20000254 	.word	0x20000254

08001ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <__NVIC_GetPriorityGrouping+0x18>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0307 	and.w	r3, r3, #7
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db0b      	blt.n	8001b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	4906      	ldr	r1, [pc, #24]	; (8001b50 <__NVIC_EnableIRQ+0x34>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c1c:	d301      	bcc.n	8001c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00f      	b.n	8001c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <SysTick_Config+0x40>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f7ff ff90 	bl	8001b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <SysTick_Config+0x40>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <SysTick_Config+0x40>)
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	e000e010 	.word	0xe000e010

08001c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff ff2d 	bl	8001ab8 <__NVIC_SetPriorityGrouping>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c78:	f7ff ff42 	bl	8001b00 <__NVIC_GetPriorityGrouping>
 8001c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	6978      	ldr	r0, [r7, #20]
 8001c84:	f7ff ff90 	bl	8001ba8 <NVIC_EncodePriority>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff5f 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c96:	bf00      	nop
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff35 	bl	8001b1c <__NVIC_EnableIRQ>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ffa2 	bl	8001c0c <SysTick_Config>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b08b      	sub	sp, #44	; 0x2c
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce6:	e148      	b.n	8001f7a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8137 	bne.w	8001f74 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4aa3      	ldr	r2, [pc, #652]	; (8001f98 <HAL_GPIO_Init+0x2c4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d05e      	beq.n	8001dce <HAL_GPIO_Init+0xfa>
 8001d10:	4aa1      	ldr	r2, [pc, #644]	; (8001f98 <HAL_GPIO_Init+0x2c4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d875      	bhi.n	8001e02 <HAL_GPIO_Init+0x12e>
 8001d16:	4aa1      	ldr	r2, [pc, #644]	; (8001f9c <HAL_GPIO_Init+0x2c8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d058      	beq.n	8001dce <HAL_GPIO_Init+0xfa>
 8001d1c:	4a9f      	ldr	r2, [pc, #636]	; (8001f9c <HAL_GPIO_Init+0x2c8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d86f      	bhi.n	8001e02 <HAL_GPIO_Init+0x12e>
 8001d22:	4a9f      	ldr	r2, [pc, #636]	; (8001fa0 <HAL_GPIO_Init+0x2cc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d052      	beq.n	8001dce <HAL_GPIO_Init+0xfa>
 8001d28:	4a9d      	ldr	r2, [pc, #628]	; (8001fa0 <HAL_GPIO_Init+0x2cc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d869      	bhi.n	8001e02 <HAL_GPIO_Init+0x12e>
 8001d2e:	4a9d      	ldr	r2, [pc, #628]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d04c      	beq.n	8001dce <HAL_GPIO_Init+0xfa>
 8001d34:	4a9b      	ldr	r2, [pc, #620]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d863      	bhi.n	8001e02 <HAL_GPIO_Init+0x12e>
 8001d3a:	4a9b      	ldr	r2, [pc, #620]	; (8001fa8 <HAL_GPIO_Init+0x2d4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d046      	beq.n	8001dce <HAL_GPIO_Init+0xfa>
 8001d40:	4a99      	ldr	r2, [pc, #612]	; (8001fa8 <HAL_GPIO_Init+0x2d4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d85d      	bhi.n	8001e02 <HAL_GPIO_Init+0x12e>
 8001d46:	2b12      	cmp	r3, #18
 8001d48:	d82a      	bhi.n	8001da0 <HAL_GPIO_Init+0xcc>
 8001d4a:	2b12      	cmp	r3, #18
 8001d4c:	d859      	bhi.n	8001e02 <HAL_GPIO_Init+0x12e>
 8001d4e:	a201      	add	r2, pc, #4	; (adr r2, 8001d54 <HAL_GPIO_Init+0x80>)
 8001d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d54:	08001dcf 	.word	0x08001dcf
 8001d58:	08001da9 	.word	0x08001da9
 8001d5c:	08001dbb 	.word	0x08001dbb
 8001d60:	08001dfd 	.word	0x08001dfd
 8001d64:	08001e03 	.word	0x08001e03
 8001d68:	08001e03 	.word	0x08001e03
 8001d6c:	08001e03 	.word	0x08001e03
 8001d70:	08001e03 	.word	0x08001e03
 8001d74:	08001e03 	.word	0x08001e03
 8001d78:	08001e03 	.word	0x08001e03
 8001d7c:	08001e03 	.word	0x08001e03
 8001d80:	08001e03 	.word	0x08001e03
 8001d84:	08001e03 	.word	0x08001e03
 8001d88:	08001e03 	.word	0x08001e03
 8001d8c:	08001e03 	.word	0x08001e03
 8001d90:	08001e03 	.word	0x08001e03
 8001d94:	08001e03 	.word	0x08001e03
 8001d98:	08001db1 	.word	0x08001db1
 8001d9c:	08001dc5 	.word	0x08001dc5
 8001da0:	4a82      	ldr	r2, [pc, #520]	; (8001fac <HAL_GPIO_Init+0x2d8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001da6:	e02c      	b.n	8001e02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	623b      	str	r3, [r7, #32]
          break;
 8001dae:	e029      	b.n	8001e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	3304      	adds	r3, #4
 8001db6:	623b      	str	r3, [r7, #32]
          break;
 8001db8:	e024      	b.n	8001e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	3308      	adds	r3, #8
 8001dc0:	623b      	str	r3, [r7, #32]
          break;
 8001dc2:	e01f      	b.n	8001e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	330c      	adds	r3, #12
 8001dca:	623b      	str	r3, [r7, #32]
          break;
 8001dcc:	e01a      	b.n	8001e04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	623b      	str	r3, [r7, #32]
          break;
 8001dda:	e013      	b.n	8001e04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001de4:	2308      	movs	r3, #8
 8001de6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	611a      	str	r2, [r3, #16]
          break;
 8001dee:	e009      	b.n	8001e04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df0:	2308      	movs	r3, #8
 8001df2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	615a      	str	r2, [r3, #20]
          break;
 8001dfa:	e003      	b.n	8001e04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e000      	b.n	8001e04 <HAL_GPIO_Init+0x130>
          break;
 8001e02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2bff      	cmp	r3, #255	; 0xff
 8001e08:	d801      	bhi.n	8001e0e <HAL_GPIO_Init+0x13a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	e001      	b.n	8001e12 <HAL_GPIO_Init+0x13e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3304      	adds	r3, #4
 8001e12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2bff      	cmp	r3, #255	; 0xff
 8001e18:	d802      	bhi.n	8001e20 <HAL_GPIO_Init+0x14c>
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	e002      	b.n	8001e26 <HAL_GPIO_Init+0x152>
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	3b08      	subs	r3, #8
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	210f      	movs	r1, #15
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	401a      	ands	r2, r3
 8001e38:	6a39      	ldr	r1, [r7, #32]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	431a      	orrs	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8090 	beq.w	8001f74 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e54:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <HAL_GPIO_Init+0x2dc>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	4a55      	ldr	r2, [pc, #340]	; (8001fb0 <HAL_GPIO_Init+0x2dc>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6193      	str	r3, [r2, #24]
 8001e60:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_GPIO_Init+0x2dc>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e6c:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_GPIO_Init+0x2e0>)
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	3302      	adds	r3, #2
 8001e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	220f      	movs	r2, #15
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a49      	ldr	r2, [pc, #292]	; (8001fb8 <HAL_GPIO_Init+0x2e4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d00d      	beq.n	8001eb4 <HAL_GPIO_Init+0x1e0>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a48      	ldr	r2, [pc, #288]	; (8001fbc <HAL_GPIO_Init+0x2e8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d007      	beq.n	8001eb0 <HAL_GPIO_Init+0x1dc>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a47      	ldr	r2, [pc, #284]	; (8001fc0 <HAL_GPIO_Init+0x2ec>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d101      	bne.n	8001eac <HAL_GPIO_Init+0x1d8>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e004      	b.n	8001eb6 <HAL_GPIO_Init+0x1e2>
 8001eac:	2303      	movs	r3, #3
 8001eae:	e002      	b.n	8001eb6 <HAL_GPIO_Init+0x1e2>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <HAL_GPIO_Init+0x1e2>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb8:	f002 0203 	and.w	r2, r2, #3
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	4093      	lsls	r3, r2
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ec6:	493b      	ldr	r1, [pc, #236]	; (8001fb4 <HAL_GPIO_Init+0x2e0>)
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3302      	adds	r3, #2
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ee0:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	4937      	ldr	r1, [pc, #220]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
 8001eec:	e006      	b.n	8001efc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eee:	4b35      	ldr	r3, [pc, #212]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	4933      	ldr	r1, [pc, #204]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d006      	beq.n	8001f16 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f08:	4b2e      	ldr	r3, [pc, #184]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	492d      	ldr	r1, [pc, #180]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60cb      	str	r3, [r1, #12]
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f16:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	4929      	ldr	r1, [pc, #164]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d006      	beq.n	8001f3e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f30:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4923      	ldr	r1, [pc, #140]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	491f      	ldr	r1, [pc, #124]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4919      	ldr	r1, [pc, #100]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	600b      	str	r3, [r1, #0]
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	4915      	ldr	r1, [pc, #84]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	3301      	adds	r3, #1
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f47f aeaf 	bne.w	8001ce8 <HAL_GPIO_Init+0x14>
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	bf00      	nop
 8001f8e:	372c      	adds	r7, #44	; 0x2c
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	10320000 	.word	0x10320000
 8001f9c:	10310000 	.word	0x10310000
 8001fa0:	10220000 	.word	0x10220000
 8001fa4:	10210000 	.word	0x10210000
 8001fa8:	10120000 	.word	0x10120000
 8001fac:	10110000 	.word	0x10110000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	40010800 	.word	0x40010800
 8001fbc:	40010c00 	.word	0x40010c00
 8001fc0:	40011000 	.word	0x40011000
 8001fc4:	40010400 	.word	0x40010400

08001fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	887b      	ldrh	r3, [r7, #2]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e001      	b.n	8001fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	807b      	strh	r3, [r7, #2]
 8002002:	4613      	mov	r3, r2
 8002004:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002006:	787b      	ldrb	r3, [r7, #1]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800200c:	887a      	ldrh	r2, [r7, #2]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002012:	e003      	b.n	800201c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	041a      	lsls	r2, r3, #16
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	611a      	str	r2, [r3, #16]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002026:	b480      	push	{r7}
 8002028:	b085      	sub	sp, #20
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002038:	887a      	ldrh	r2, [r7, #2]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4013      	ands	r3, r2
 800203e:	041a      	lsls	r2, r3, #16
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	43d9      	mvns	r1, r3
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	400b      	ands	r3, r1
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	611a      	str	r2, [r3, #16]
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e26c      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8087 	beq.w	8002186 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002078:	4b92      	ldr	r3, [pc, #584]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b04      	cmp	r3, #4
 8002082:	d00c      	beq.n	800209e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002084:	4b8f      	ldr	r3, [pc, #572]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b08      	cmp	r3, #8
 800208e:	d112      	bne.n	80020b6 <HAL_RCC_OscConfig+0x5e>
 8002090:	4b8c      	ldr	r3, [pc, #560]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d10b      	bne.n	80020b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209e:	4b89      	ldr	r3, [pc, #548]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d06c      	beq.n	8002184 <HAL_RCC_OscConfig+0x12c>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d168      	bne.n	8002184 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e246      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x76>
 80020c0:	4b80      	ldr	r3, [pc, #512]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a7f      	ldr	r2, [pc, #508]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	e02e      	b.n	800212c <HAL_RCC_OscConfig+0xd4>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x98>
 80020d6:	4b7b      	ldr	r3, [pc, #492]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a7a      	ldr	r2, [pc, #488]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b78      	ldr	r3, [pc, #480]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a77      	ldr	r2, [pc, #476]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e01d      	b.n	800212c <HAL_RCC_OscConfig+0xd4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0xbc>
 80020fa:	4b72      	ldr	r3, [pc, #456]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a71      	ldr	r2, [pc, #452]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b6f      	ldr	r3, [pc, #444]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a6e      	ldr	r2, [pc, #440]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e00b      	b.n	800212c <HAL_RCC_OscConfig+0xd4>
 8002114:	4b6b      	ldr	r3, [pc, #428]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a6a      	ldr	r2, [pc, #424]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800211a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b68      	ldr	r3, [pc, #416]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a67      	ldr	r2, [pc, #412]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d013      	beq.n	800215c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff fcb6 	bl	8001aa4 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213c:	f7ff fcb2 	bl	8001aa4 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e1fa      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0xe4>
 800215a:	e014      	b.n	8002186 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7ff fca2 	bl	8001aa4 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002164:	f7ff fc9e 	bl	8001aa4 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	; 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e1e6      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x10c>
 8002182:	e000      	b.n	8002186 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d063      	beq.n	800225a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002192:	4b4c      	ldr	r3, [pc, #304]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00b      	beq.n	80021b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800219e:	4b49      	ldr	r3, [pc, #292]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d11c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x18c>
 80021aa:	4b46      	ldr	r3, [pc, #280]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d116      	bne.n	80021e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_RCC_OscConfig+0x176>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e1ba      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ce:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4939      	ldr	r1, [pc, #228]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e2:	e03a      	b.n	800225a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d020      	beq.n	800222e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ec:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <HAL_RCC_OscConfig+0x270>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7ff fc57 	bl	8001aa4 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fa:	f7ff fc53 	bl	8001aa4 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e19b      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220c:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002218:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4927      	ldr	r1, [pc, #156]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]
 800222c:	e015      	b.n	800225a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800222e:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <HAL_RCC_OscConfig+0x270>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fc36 	bl	8001aa4 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223c:	f7ff fc32 	bl	8001aa4 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e17a      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d03a      	beq.n	80022dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d019      	beq.n	80022a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <HAL_RCC_OscConfig+0x274>)
 8002270:	2201      	movs	r2, #1
 8002272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002274:	f7ff fc16 	bl	8001aa4 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227c:	f7ff fc12 	bl	8001aa4 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e15a      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800229a:	2001      	movs	r0, #1
 800229c:	f000 fa9a 	bl	80027d4 <RCC_Delay>
 80022a0:	e01c      	b.n	80022dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_OscConfig+0x274>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a8:	f7ff fbfc 	bl	8001aa4 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ae:	e00f      	b.n	80022d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b0:	f7ff fbf8 	bl	8001aa4 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d908      	bls.n	80022d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e140      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	42420000 	.word	0x42420000
 80022cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d0:	4b9e      	ldr	r3, [pc, #632]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e9      	bne.n	80022b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80a6 	beq.w	8002436 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ee:	4b97      	ldr	r3, [pc, #604]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10d      	bne.n	8002316 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	4b94      	ldr	r3, [pc, #592]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4a93      	ldr	r2, [pc, #588]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002304:	61d3      	str	r3, [r2, #28]
 8002306:	4b91      	ldr	r3, [pc, #580]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002312:	2301      	movs	r3, #1
 8002314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002316:	4b8e      	ldr	r3, [pc, #568]	; (8002550 <HAL_RCC_OscConfig+0x4f8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d118      	bne.n	8002354 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002322:	4b8b      	ldr	r3, [pc, #556]	; (8002550 <HAL_RCC_OscConfig+0x4f8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a8a      	ldr	r2, [pc, #552]	; (8002550 <HAL_RCC_OscConfig+0x4f8>)
 8002328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f7ff fbb9 	bl	8001aa4 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002336:	f7ff fbb5 	bl	8001aa4 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b64      	cmp	r3, #100	; 0x64
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e0fd      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_RCC_OscConfig+0x4f8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x312>
 800235c:	4b7b      	ldr	r3, [pc, #492]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4a7a      	ldr	r2, [pc, #488]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6213      	str	r3, [r2, #32]
 8002368:	e02d      	b.n	80023c6 <HAL_RCC_OscConfig+0x36e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x334>
 8002372:	4b76      	ldr	r3, [pc, #472]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4a75      	ldr	r2, [pc, #468]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6213      	str	r3, [r2, #32]
 800237e:	4b73      	ldr	r3, [pc, #460]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a72      	ldr	r2, [pc, #456]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002384:	f023 0304 	bic.w	r3, r3, #4
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	e01c      	b.n	80023c6 <HAL_RCC_OscConfig+0x36e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b05      	cmp	r3, #5
 8002392:	d10c      	bne.n	80023ae <HAL_RCC_OscConfig+0x356>
 8002394:	4b6d      	ldr	r3, [pc, #436]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4a6c      	ldr	r2, [pc, #432]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	6213      	str	r3, [r2, #32]
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4a69      	ldr	r2, [pc, #420]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	e00b      	b.n	80023c6 <HAL_RCC_OscConfig+0x36e>
 80023ae:	4b67      	ldr	r3, [pc, #412]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a66      	ldr	r2, [pc, #408]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6213      	str	r3, [r2, #32]
 80023ba:	4b64      	ldr	r3, [pc, #400]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a63      	ldr	r2, [pc, #396]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	f023 0304 	bic.w	r3, r3, #4
 80023c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d015      	beq.n	80023fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ce:	f7ff fb69 	bl	8001aa4 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7ff fb65 	bl	8001aa4 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e0ab      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ec:	4b57      	ldr	r3, [pc, #348]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ee      	beq.n	80023d6 <HAL_RCC_OscConfig+0x37e>
 80023f8:	e014      	b.n	8002424 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fa:	f7ff fb53 	bl	8001aa4 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7ff fb4f 	bl	8001aa4 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e095      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002418:	4b4c      	ldr	r3, [pc, #304]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1ee      	bne.n	8002402 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002424:	7dfb      	ldrb	r3, [r7, #23]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d105      	bne.n	8002436 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242a:	4b48      	ldr	r3, [pc, #288]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a47      	ldr	r2, [pc, #284]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002434:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8081 	beq.w	8002542 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002440:	4b42      	ldr	r3, [pc, #264]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	d061      	beq.n	8002510 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d146      	bne.n	80024e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002454:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <HAL_RCC_OscConfig+0x4fc>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7ff fb23 	bl	8001aa4 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002462:	f7ff fb1f 	bl	8001aa4 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e067      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002474:	4b35      	ldr	r3, [pc, #212]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f0      	bne.n	8002462 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002488:	d108      	bne.n	800249c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800248a:	4b30      	ldr	r3, [pc, #192]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	492d      	ldr	r1, [pc, #180]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a19      	ldr	r1, [r3, #32]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	430b      	orrs	r3, r1
 80024ae:	4927      	ldr	r1, [pc, #156]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <HAL_RCC_OscConfig+0x4fc>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7ff faf3 	bl	8001aa4 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c2:	f7ff faef 	bl	8001aa4 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e037      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x46a>
 80024e0:	e02f      	b.n	8002542 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <HAL_RCC_OscConfig+0x4fc>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7ff fadc 	bl	8001aa4 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7ff fad8 	bl	8001aa4 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e020      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x498>
 800250e:	e018      	b.n	8002542 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e013      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	429a      	cmp	r2, r3
 800252e:	d106      	bne.n	800253e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	429a      	cmp	r2, r3
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000
 8002550:	40007000 	.word	0x40007000
 8002554:	42420060 	.word	0x42420060

08002558 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0d0      	b.n	800270e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800256c:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d910      	bls.n	800259c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b67      	ldr	r3, [pc, #412]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 0207 	bic.w	r2, r3, #7
 8002582:	4965      	ldr	r1, [pc, #404]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b63      	ldr	r3, [pc, #396]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0b8      	b.n	800270e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b4:	4b59      	ldr	r3, [pc, #356]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a58      	ldr	r2, [pc, #352]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a52      	ldr	r2, [pc, #328]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	494d      	ldr	r1, [pc, #308]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d040      	beq.n	8002678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b47      	ldr	r3, [pc, #284]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d115      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e07f      	b.n	800270e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002616:	4b41      	ldr	r3, [pc, #260]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e073      	b.n	800270e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	4b3d      	ldr	r3, [pc, #244]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e06b      	b.n	800270e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002636:	4b39      	ldr	r3, [pc, #228]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f023 0203 	bic.w	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4936      	ldr	r1, [pc, #216]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002648:	f7ff fa2c 	bl	8001aa4 <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	e00a      	b.n	8002666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002650:	f7ff fa28 	bl	8001aa4 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	; 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e053      	b.n	800270e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	4b2d      	ldr	r3, [pc, #180]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 020c 	and.w	r2, r3, #12
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	429a      	cmp	r2, r3
 8002676:	d1eb      	bne.n	8002650 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002678:	4b27      	ldr	r3, [pc, #156]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d210      	bcs.n	80026a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 0207 	bic.w	r2, r3, #7
 800268e:	4922      	ldr	r1, [pc, #136]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e032      	b.n	800270e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4916      	ldr	r1, [pc, #88]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	490e      	ldr	r1, [pc, #56]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026e6:	f000 f821 	bl	800272c <HAL_RCC_GetSysClockFreq>
 80026ea:	4602      	mov	r2, r0
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	490a      	ldr	r1, [pc, #40]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026f8:	5ccb      	ldrb	r3, [r1, r3]
 80026fa:	fa22 f303 	lsr.w	r3, r2, r3
 80026fe:	4a09      	ldr	r2, [pc, #36]	; (8002724 <HAL_RCC_ClockConfig+0x1cc>)
 8002700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCC_ClockConfig+0x1d0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f98a 	bl	8001a20 <HAL_InitTick>

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40022000 	.word	0x40022000
 800271c:	40021000 	.word	0x40021000
 8002720:	08003038 	.word	0x08003038
 8002724:	20000150 	.word	0x20000150
 8002728:	20000158 	.word	0x20000158

0800272c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002746:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b04      	cmp	r3, #4
 8002754:	d002      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x30>
 8002756:	2b08      	cmp	r3, #8
 8002758:	d003      	beq.n	8002762 <HAL_RCC_GetSysClockFreq+0x36>
 800275a:	e027      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800275e:	613b      	str	r3, [r7, #16]
      break;
 8002760:	e027      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	0c9b      	lsrs	r3, r3, #18
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800276c:	5cd3      	ldrb	r3, [r2, r3]
 800276e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d010      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	0c5b      	lsrs	r3, r3, #17
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	4a11      	ldr	r2, [pc, #68]	; (80027cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002786:	5cd3      	ldrb	r3, [r2, r3]
 8002788:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800278e:	fb02 f203 	mul.w	r2, r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	e004      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	613b      	str	r3, [r7, #16]
      break;
 80027aa:	e002      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ae:	613b      	str	r3, [r7, #16]
      break;
 80027b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b2:	693b      	ldr	r3, [r7, #16]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	007a1200 	.word	0x007a1200
 80027c8:	08003048 	.word	0x08003048
 80027cc:	08003058 	.word	0x08003058
 80027d0:	003d0900 	.word	0x003d0900

080027d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027dc:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <RCC_Delay+0x34>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0a      	ldr	r2, [pc, #40]	; (800280c <RCC_Delay+0x38>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	0a5b      	lsrs	r3, r3, #9
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027f0:	bf00      	nop
  }
  while (Delay --);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1e5a      	subs	r2, r3, #1
 80027f6:	60fa      	str	r2, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f9      	bne.n	80027f0 <RCC_Delay+0x1c>
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	20000150 	.word	0x20000150
 800280c:	10624dd3 	.word	0x10624dd3

08002810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e041      	b.n	80028a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe ff7a 	bl	8001730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3304      	adds	r3, #4
 800284c:	4619      	mov	r1, r3
 800284e:	4610      	mov	r0, r2
 8002850:	f000 fa56 	bl	8002d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d001      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e035      	b.n	8002934 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a16      	ldr	r2, [pc, #88]	; (8002940 <HAL_TIM_Base_Start_IT+0x90>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d009      	beq.n	80028fe <HAL_TIM_Base_Start_IT+0x4e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f2:	d004      	beq.n	80028fe <HAL_TIM_Base_Start_IT+0x4e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a12      	ldr	r2, [pc, #72]	; (8002944 <HAL_TIM_Base_Start_IT+0x94>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d111      	bne.n	8002922 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b06      	cmp	r3, #6
 800290e:	d010      	beq.n	8002932 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002920:	e007      	b.n	8002932 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40012c00 	.word	0x40012c00
 8002944:	40000400 	.word	0x40000400

08002948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d020      	beq.n	80029ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01b      	beq.n	80029ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0202 	mvn.w	r2, #2
 800297c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f998 	bl	8002cc8 <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f98b 	bl	8002cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f99a 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d020      	beq.n	80029f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01b      	beq.n	80029f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0204 	mvn.w	r2, #4
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f972 	bl	8002cc8 <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f965 	bl	8002cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f974 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d020      	beq.n	8002a44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0208 	mvn.w	r2, #8
 8002a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2204      	movs	r2, #4
 8002a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f94c 	bl	8002cc8 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f93f 	bl	8002cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f94e 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d020      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01b      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0210 	mvn.w	r2, #16
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2208      	movs	r2, #8
 8002a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f926 	bl	8002cc8 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f919 	bl	8002cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f928 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00c      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0201 	mvn.w	r2, #1
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe ff68 	bl	8001984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fa6f 	bl	8002fb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8f8 	bl	8002cec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00c      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d007      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0220 	mvn.w	r2, #32
 8002b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fa42 	bl	8002fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_TIM_ConfigClockSource+0x1c>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e0b4      	b.n	8002cae <HAL_TIM_ConfigClockSource+0x186>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7c:	d03e      	beq.n	8002bfc <HAL_TIM_ConfigClockSource+0xd4>
 8002b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b82:	f200 8087 	bhi.w	8002c94 <HAL_TIM_ConfigClockSource+0x16c>
 8002b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8a:	f000 8086 	beq.w	8002c9a <HAL_TIM_ConfigClockSource+0x172>
 8002b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b92:	d87f      	bhi.n	8002c94 <HAL_TIM_ConfigClockSource+0x16c>
 8002b94:	2b70      	cmp	r3, #112	; 0x70
 8002b96:	d01a      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0xa6>
 8002b98:	2b70      	cmp	r3, #112	; 0x70
 8002b9a:	d87b      	bhi.n	8002c94 <HAL_TIM_ConfigClockSource+0x16c>
 8002b9c:	2b60      	cmp	r3, #96	; 0x60
 8002b9e:	d050      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x11a>
 8002ba0:	2b60      	cmp	r3, #96	; 0x60
 8002ba2:	d877      	bhi.n	8002c94 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba4:	2b50      	cmp	r3, #80	; 0x50
 8002ba6:	d03c      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0xfa>
 8002ba8:	2b50      	cmp	r3, #80	; 0x50
 8002baa:	d873      	bhi.n	8002c94 <HAL_TIM_ConfigClockSource+0x16c>
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d058      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0x13a>
 8002bb0:	2b40      	cmp	r3, #64	; 0x40
 8002bb2:	d86f      	bhi.n	8002c94 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb4:	2b30      	cmp	r3, #48	; 0x30
 8002bb6:	d064      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0x15a>
 8002bb8:	2b30      	cmp	r3, #48	; 0x30
 8002bba:	d86b      	bhi.n	8002c94 <HAL_TIM_ConfigClockSource+0x16c>
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d060      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0x15a>
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d867      	bhi.n	8002c94 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d05c      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0x15a>
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d05a      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0x15a>
 8002bcc:	e062      	b.n	8002c94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6899      	ldr	r1, [r3, #8]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f000 f96a 	bl	8002eb6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	609a      	str	r2, [r3, #8]
      break;
 8002bfa:	e04f      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	6899      	ldr	r1, [r3, #8]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f000 f953 	bl	8002eb6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c1e:	609a      	str	r2, [r3, #8]
      break;
 8002c20:	e03c      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6859      	ldr	r1, [r3, #4]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f000 f8ca 	bl	8002dc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2150      	movs	r1, #80	; 0x50
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f921 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002c40:	e02c      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6859      	ldr	r1, [r3, #4]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f000 f8e8 	bl	8002e24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2160      	movs	r1, #96	; 0x60
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f911 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002c60:	e01c      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6859      	ldr	r1, [r3, #4]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f000 f8aa 	bl	8002dc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2140      	movs	r1, #64	; 0x40
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 f901 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002c80:	e00c      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	f000 f8f8 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002c92:	e003      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      break;
 8002c98:	e000      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
	...

08002d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a2b      	ldr	r2, [pc, #172]	; (8002dc0 <TIM_Base_SetConfig+0xc0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d007      	beq.n	8002d28 <TIM_Base_SetConfig+0x28>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1e:	d003      	beq.n	8002d28 <TIM_Base_SetConfig+0x28>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a28      	ldr	r2, [pc, #160]	; (8002dc4 <TIM_Base_SetConfig+0xc4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d108      	bne.n	8002d3a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a20      	ldr	r2, [pc, #128]	; (8002dc0 <TIM_Base_SetConfig+0xc0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d007      	beq.n	8002d52 <TIM_Base_SetConfig+0x52>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d48:	d003      	beq.n	8002d52 <TIM_Base_SetConfig+0x52>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a1d      	ldr	r2, [pc, #116]	; (8002dc4 <TIM_Base_SetConfig+0xc4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d108      	bne.n	8002d64 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a0d      	ldr	r2, [pc, #52]	; (8002dc0 <TIM_Base_SetConfig+0xc0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d103      	bne.n	8002d98 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f023 0201 	bic.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	611a      	str	r2, [r3, #16]
  }
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40000400 	.word	0x40000400

08002dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f023 0201 	bic.w	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f023 030a 	bic.w	r3, r3, #10
 8002e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	621a      	str	r2, [r3, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f023 0210 	bic.w	r2, r3, #16
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	031b      	lsls	r3, r3, #12
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	621a      	str	r2, [r3, #32]
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f043 0307 	orr.w	r3, r3, #7
 8002ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	609a      	str	r2, [r3, #8]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b087      	sub	sp, #28
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	021a      	lsls	r2, r3, #8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	609a      	str	r2, [r3, #8]
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e041      	b.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f58:	d004      	beq.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a10      	ldr	r2, [pc, #64]	; (8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10c      	bne.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40000400 	.word	0x40000400

08002fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <__libc_init_array>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	2600      	movs	r6, #0
 8002fcc:	4d0c      	ldr	r5, [pc, #48]	; (8003000 <__libc_init_array+0x38>)
 8002fce:	4c0d      	ldr	r4, [pc, #52]	; (8003004 <__libc_init_array+0x3c>)
 8002fd0:	1b64      	subs	r4, r4, r5
 8002fd2:	10a4      	asrs	r4, r4, #2
 8002fd4:	42a6      	cmp	r6, r4
 8002fd6:	d109      	bne.n	8002fec <__libc_init_array+0x24>
 8002fd8:	f000 f822 	bl	8003020 <_init>
 8002fdc:	2600      	movs	r6, #0
 8002fde:	4d0a      	ldr	r5, [pc, #40]	; (8003008 <__libc_init_array+0x40>)
 8002fe0:	4c0a      	ldr	r4, [pc, #40]	; (800300c <__libc_init_array+0x44>)
 8002fe2:	1b64      	subs	r4, r4, r5
 8002fe4:	10a4      	asrs	r4, r4, #2
 8002fe6:	42a6      	cmp	r6, r4
 8002fe8:	d105      	bne.n	8002ff6 <__libc_init_array+0x2e>
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
 8002fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff0:	4798      	blx	r3
 8002ff2:	3601      	adds	r6, #1
 8002ff4:	e7ee      	b.n	8002fd4 <__libc_init_array+0xc>
 8002ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffa:	4798      	blx	r3
 8002ffc:	3601      	adds	r6, #1
 8002ffe:	e7f2      	b.n	8002fe6 <__libc_init_array+0x1e>
 8003000:	0800305c 	.word	0x0800305c
 8003004:	0800305c 	.word	0x0800305c
 8003008:	0800305c 	.word	0x0800305c
 800300c:	08003060 	.word	0x08003060

08003010 <memset>:
 8003010:	4603      	mov	r3, r0
 8003012:	4402      	add	r2, r0
 8003014:	4293      	cmp	r3, r2
 8003016:	d100      	bne.n	800301a <memset+0xa>
 8003018:	4770      	bx	lr
 800301a:	f803 1b01 	strb.w	r1, [r3], #1
 800301e:	e7f9      	b.n	8003014 <memset+0x4>

08003020 <_init>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	bf00      	nop
 8003024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003026:	bc08      	pop	{r3}
 8003028:	469e      	mov	lr, r3
 800302a:	4770      	bx	lr

0800302c <_fini>:
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302e:	bf00      	nop
 8003030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003032:	bc08      	pop	{r3}
 8003034:	469e      	mov	lr, r3
 8003036:	4770      	bx	lr
